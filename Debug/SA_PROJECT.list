
SA_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003afc  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08003bb4  08003bb4  00004bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cf4  08003cf4  00005060  2**0
                  CONTENTS
  4 .ARM          00000000  08003cf4  08003cf4  00005060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cf4  08003cf4  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf4  08003cf4  00004cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cf8  08003cf8  00004cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003cfc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000060  08003d5c  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08003d5c  00005250  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007dc1  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b9b  00000000  00000000  0000ce49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0000e9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000650  00000000  00000000  0000f240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000147a6  00000000  00000000  0000f890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc59  00000000  00000000  00024036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d035  00000000  00000000  0002fc8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000accc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002144  00000000  00000000  000acd08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000aee4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000060 	.word	0x20000060
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003b9c 	.word	0x08003b9c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000064 	.word	0x20000064
 80000fc:	08003b9c 	.word	0x08003b9c

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <send_to_lcd>:

#include "LCD1602.h"


void send_to_lcd (char data, int rs)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	0002      	movs	r2, r0
 8000408:	6039      	str	r1, [r7, #0]
 800040a:	1dfb      	adds	r3, r7, #7
 800040c:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	b2da      	uxtb	r2, r3
 8000412:	2380      	movs	r3, #128	@ 0x80
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	4822      	ldr	r0, [pc, #136]	@ (80004a0 <send_to_lcd+0xa0>)
 8000418:	0019      	movs	r1, r3
 800041a:	f001 fa68 	bl	80018ee <HAL_GPIO_WritePin>
    /* write the data to the respective pin */
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 800041e:	1dfb      	adds	r3, r7, #7
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	08db      	lsrs	r3, r3, #3
 8000424:	b2db      	uxtb	r3, r3
 8000426:	2201      	movs	r2, #1
 8000428:	4013      	ands	r3, r2
 800042a:	b2da      	uxtb	r2, r3
 800042c:	2380      	movs	r3, #128	@ 0x80
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	481b      	ldr	r0, [pc, #108]	@ (80004a0 <send_to_lcd+0xa0>)
 8000432:	0019      	movs	r1, r3
 8000434:	f001 fa5b 	bl	80018ee <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000438:	1dfb      	adds	r3, r7, #7
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	089b      	lsrs	r3, r3, #2
 800043e:	b2db      	uxtb	r3, r3
 8000440:	2201      	movs	r2, #1
 8000442:	4013      	ands	r3, r2
 8000444:	b2db      	uxtb	r3, r3
 8000446:	4816      	ldr	r0, [pc, #88]	@ (80004a0 <send_to_lcd+0xa0>)
 8000448:	001a      	movs	r2, r3
 800044a:	2120      	movs	r1, #32
 800044c:	f001 fa4f 	bl	80018ee <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000450:	1dfb      	adds	r3, r7, #7
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	085b      	lsrs	r3, r3, #1
 8000456:	b2db      	uxtb	r3, r3
 8000458:	2201      	movs	r2, #1
 800045a:	4013      	ands	r3, r2
 800045c:	b2db      	uxtb	r3, r3
 800045e:	4810      	ldr	r0, [pc, #64]	@ (80004a0 <send_to_lcd+0xa0>)
 8000460:	001a      	movs	r2, r3
 8000462:	2110      	movs	r1, #16
 8000464:	f001 fa43 	bl	80018ee <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000468:	1dfb      	adds	r3, r7, #7
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2201      	movs	r2, #1
 800046e:	4013      	ands	r3, r2
 8000470:	b2db      	uxtb	r3, r3
 8000472:	480b      	ldr	r0, [pc, #44]	@ (80004a0 <send_to_lcd+0xa0>)
 8000474:	001a      	movs	r2, r3
 8000476:	2108      	movs	r1, #8
 8000478:	f001 fa39 	bl	80018ee <HAL_GPIO_WritePin>
    /* Toggle EN PIN to send the data
     * if the HCLK > 100 MHz, use the  20 us delay
     * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
     */
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 800047c:	2380      	movs	r3, #128	@ 0x80
 800047e:	01db      	lsls	r3, r3, #7
 8000480:	4808      	ldr	r0, [pc, #32]	@ (80004a4 <send_to_lcd+0xa4>)
 8000482:	2201      	movs	r2, #1
 8000484:	0019      	movs	r1, r3
 8000486:	f001 fa32 	bl	80018ee <HAL_GPIO_WritePin>
//  delay (20);
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 800048a:	2380      	movs	r3, #128	@ 0x80
 800048c:	01db      	lsls	r3, r3, #7
 800048e:	4805      	ldr	r0, [pc, #20]	@ (80004a4 <send_to_lcd+0xa4>)
 8000490:	2200      	movs	r2, #0
 8000492:	0019      	movs	r1, r3
 8000494:	f001 fa2b 	bl	80018ee <HAL_GPIO_WritePin>
//  delay (20);
}
 8000498:	46c0      	nop			@ (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	b002      	add	sp, #8
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	50000400 	.word	0x50000400
 80004a4:	50000800 	.word	0x50000800

080004a8 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80004a8:	b590      	push	{r4, r7, lr}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	0002      	movs	r2, r0
 80004b0:	1dfb      	adds	r3, r7, #7
 80004b2:	701a      	strb	r2, [r3, #0]
    char datatosend;
    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 80004b4:	200f      	movs	r0, #15
 80004b6:	183b      	adds	r3, r7, r0
 80004b8:	1dfa      	adds	r2, r7, #7
 80004ba:	7812      	ldrb	r2, [r2, #0]
 80004bc:	0912      	lsrs	r2, r2, #4
 80004be:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend,0);  // RS must be while sending command
 80004c0:	0004      	movs	r4, r0
 80004c2:	183b      	adds	r3, r7, r0
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2100      	movs	r1, #0
 80004c8:	0018      	movs	r0, r3
 80004ca:	f7ff ff99 	bl	8000400 <send_to_lcd>
    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 80004ce:	0020      	movs	r0, r4
 80004d0:	183b      	adds	r3, r7, r0
 80004d2:	1dfa      	adds	r2, r7, #7
 80004d4:	7812      	ldrb	r2, [r2, #0]
 80004d6:	210f      	movs	r1, #15
 80004d8:	400a      	ands	r2, r1
 80004da:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend, 0);
 80004dc:	183b      	adds	r3, r7, r0
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2100      	movs	r1, #0
 80004e2:	0018      	movs	r0, r3
 80004e4:	f7ff ff8c 	bl	8000400 <send_to_lcd>
	}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b005      	add	sp, #20
 80004ee:	bd90      	pop	{r4, r7, pc}

080004f0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	0002      	movs	r2, r0
 80004f8:	1dfb      	adds	r3, r7, #7
 80004fa:	701a      	strb	r2, [r3, #0]
    char datatosend;

    /* send higher nibble */
    datatosend = ((data>>4)&0x0f);
 80004fc:	200f      	movs	r0, #15
 80004fe:	183b      	adds	r3, r7, r0
 8000500:	1dfa      	adds	r2, r7, #7
 8000502:	7812      	ldrb	r2, [r2, #0]
 8000504:	0912      	lsrs	r2, r2, #4
 8000506:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000508:	0004      	movs	r4, r0
 800050a:	183b      	adds	r3, r7, r0
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2101      	movs	r1, #1
 8000510:	0018      	movs	r0, r3
 8000512:	f7ff ff75 	bl	8000400 <send_to_lcd>
    /* send Lower nibble */
    datatosend = ((data)&0x0f);
 8000516:	0020      	movs	r0, r4
 8000518:	183b      	adds	r3, r7, r0
 800051a:	1dfa      	adds	r2, r7, #7
 800051c:	7812      	ldrb	r2, [r2, #0]
 800051e:	210f      	movs	r1, #15
 8000520:	400a      	ands	r2, r1
 8000522:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend, 1);
 8000524:	183b      	adds	r3, r7, r0
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2101      	movs	r1, #1
 800052a:	0018      	movs	r0, r3
 800052c:	f7ff ff68 	bl	8000400 <send_to_lcd>
	}
 8000530:	46c0      	nop			@ (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b005      	add	sp, #20
 8000536:	bd90      	pop	{r4, r7, pc}

08000538 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
    switch (row)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d003      	beq.n	8000550 <lcd_put_cur+0x18>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d005      	beq.n	800055a <lcd_put_cur+0x22>
 800054e:	e009      	b.n	8000564 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	2280      	movs	r2, #128	@ 0x80
 8000554:	4313      	orrs	r3, r2
 8000556:	603b      	str	r3, [r7, #0]
            break;
 8000558:	e004      	b.n	8000564 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	22c0      	movs	r2, #192	@ 0xc0
 800055e:	4313      	orrs	r3, r2
 8000560:	603b      	str	r3, [r7, #0]
            break;
 8000562:	46c0      	nop			@ (mov r8, r8)
    	}
    lcd_send_cmd (col);
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	b2db      	uxtb	r3, r3
 8000568:	0018      	movs	r0, r3
 800056a:	f7ff ff9d 	bl	80004a8 <lcd_send_cmd>
	}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}

08000576 <lcd_init>:

void lcd_init (void)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	af00      	add	r7, sp, #0
    // 4 bit initialisation
    HAL_Delay(50);  // wait for >40ms
 800057a:	2032      	movs	r0, #50	@ 0x32
 800057c:	f000 ff5e 	bl	800143c <HAL_Delay>
    lcd_send_cmd (0x30);
 8000580:	2030      	movs	r0, #48	@ 0x30
 8000582:	f7ff ff91 	bl	80004a8 <lcd_send_cmd>
    HAL_Delay(5);  // wait for >4.1ms
 8000586:	2005      	movs	r0, #5
 8000588:	f000 ff58 	bl	800143c <HAL_Delay>
    lcd_send_cmd (0x30);
 800058c:	2030      	movs	r0, #48	@ 0x30
 800058e:	f7ff ff8b 	bl	80004a8 <lcd_send_cmd>
    HAL_Delay(1);  // wait for >100us
 8000592:	2001      	movs	r0, #1
 8000594:	f000 ff52 	bl	800143c <HAL_Delay>
    lcd_send_cmd (0x30);
 8000598:	2030      	movs	r0, #48	@ 0x30
 800059a:	f7ff ff85 	bl	80004a8 <lcd_send_cmd>
    HAL_Delay(10);
 800059e:	200a      	movs	r0, #10
 80005a0:	f000 ff4c 	bl	800143c <HAL_Delay>
    lcd_send_cmd (0x20);  // 4bit mode
 80005a4:	2020      	movs	r0, #32
 80005a6:	f7ff ff7f 	bl	80004a8 <lcd_send_cmd>
    HAL_Delay(10);
 80005aa:	200a      	movs	r0, #10
 80005ac:	f000 ff46 	bl	800143c <HAL_Delay>

    // dislay initialisation
    lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80005b0:	2028      	movs	r0, #40	@ 0x28
 80005b2:	f7ff ff79 	bl	80004a8 <lcd_send_cmd>
    HAL_Delay(1);
 80005b6:	2001      	movs	r0, #1
 80005b8:	f000 ff40 	bl	800143c <HAL_Delay>
    lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80005bc:	2008      	movs	r0, #8
 80005be:	f7ff ff73 	bl	80004a8 <lcd_send_cmd>
    HAL_Delay(1);
 80005c2:	2001      	movs	r0, #1
 80005c4:	f000 ff3a 	bl	800143c <HAL_Delay>
    lcd_send_cmd (0x01);  // clear display
 80005c8:	2001      	movs	r0, #1
 80005ca:	f7ff ff6d 	bl	80004a8 <lcd_send_cmd>
    HAL_Delay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 ff34 	bl	800143c <HAL_Delay>
    HAL_Delay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f000 ff31 	bl	800143c <HAL_Delay>
    lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80005da:	2006      	movs	r0, #6
 80005dc:	f7ff ff64 	bl	80004a8 <lcd_send_cmd>
    HAL_Delay(1);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f000 ff2b 	bl	800143c <HAL_Delay>
    lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80005e6:	200c      	movs	r0, #12
 80005e8:	f7ff ff5e 	bl	80004a8 <lcd_send_cmd>
  }
 80005ec:	46c0      	nop			@ (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <LCDClear>:

void LCDClear( void )
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01);
 80005f6:	2001      	movs	r0, #1
 80005f8:	f7ff ff56 	bl	80004a8 <lcd_send_cmd>
	HAL_Delay(50);
 80005fc:	2032      	movs	r0, #50	@ 0x32
 80005fe:	f000 ff1d 	bl	800143c <HAL_Delay>
	}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <LCDSendString>:

void LCDSendString( char *str )
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	do{
		HAL_Delay(50);
 8000610:	2032      	movs	r0, #50	@ 0x32
 8000612:	f000 ff13 	bl	800143c <HAL_Delay>
		lcd_send_data(*str);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	0018      	movs	r0, r3
 800061c:	f7ff ff68 	bl	80004f0 <lcd_send_data>
		str++;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3301      	adds	r3, #1
 8000624:	607b      	str	r3, [r7, #4]
		}while(*str != '\0');
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d1f0      	bne.n	8000610 <LCDSendString+0x8>
	}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	46c0      	nop			@ (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b002      	add	sp, #8
 8000636:	bd80      	pop	{r7, pc}

08000638 <decToBcd>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#define DS3231_ADDRESS 0xD0
uint8_t decToBcd(int val)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	210a      	movs	r1, #10
 8000644:	0018      	movs	r0, r3
 8000646:	f7ff fdef 	bl	8000228 <__divsi3>
 800064a:	0003      	movs	r3, r0
 800064c:	b2db      	uxtb	r3, r3
 800064e:	011b      	lsls	r3, r3, #4
 8000650:	b2dc      	uxtb	r4, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	210a      	movs	r1, #10
 8000656:	0018      	movs	r0, r3
 8000658:	f7ff fecc 	bl	80003f4 <__aeabi_idivmod>
 800065c:	000b      	movs	r3, r1
 800065e:	b2db      	uxtb	r3, r3
 8000660:	18e3      	adds	r3, r4, r3
 8000662:	b2db      	uxtb	r3, r3
}
 8000664:	0018      	movs	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	b003      	add	sp, #12
 800066a:	bd90      	pop	{r4, r7, pc}

0800066c <bcdToDec>:
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	0002      	movs	r2, r0
 8000674:	1dfb      	adds	r3, r7, #7
 8000676:	701a      	strb	r2, [r3, #0]
  return (int)( (val/16*10) + (val%16) );
 8000678:	1dfb      	adds	r3, r7, #7
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	091b      	lsrs	r3, r3, #4
 800067e:	b2db      	uxtb	r3, r3
 8000680:	001a      	movs	r2, r3
 8000682:	0013      	movs	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	189b      	adds	r3, r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	0019      	movs	r1, r3
 800068c:	1dfb      	adds	r3, r7, #7
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	220f      	movs	r2, #15
 8000692:	4013      	ands	r3, r2
 8000694:	18cb      	adds	r3, r1, r3
}
 8000696:	0018      	movs	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	b002      	add	sp, #8
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <Set_Time>:
TIME time;

// function to set time

void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 80006a0:	b5b0      	push	{r4, r5, r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af04      	add	r7, sp, #16
 80006a6:	0005      	movs	r5, r0
 80006a8:	000c      	movs	r4, r1
 80006aa:	0010      	movs	r0, r2
 80006ac:	0019      	movs	r1, r3
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	1c2a      	adds	r2, r5, #0
 80006b2:	701a      	strb	r2, [r3, #0]
 80006b4:	1dbb      	adds	r3, r7, #6
 80006b6:	1c22      	adds	r2, r4, #0
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	1d7b      	adds	r3, r7, #5
 80006bc:	1c02      	adds	r2, r0, #0
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	1c0a      	adds	r2, r1, #0
 80006c4:	701a      	strb	r2, [r3, #0]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	0018      	movs	r0, r3
 80006cc:	f7ff ffb4 	bl	8000638 <decToBcd>
 80006d0:	0003      	movs	r3, r0
 80006d2:	001a      	movs	r2, r3
 80006d4:	2408      	movs	r4, #8
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	701a      	strb	r2, [r3, #0]
	set_time[1] = decToBcd(min);
 80006da:	1dbb      	adds	r3, r7, #6
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	0018      	movs	r0, r3
 80006e0:	f7ff ffaa 	bl	8000638 <decToBcd>
 80006e4:	0003      	movs	r3, r0
 80006e6:	001a      	movs	r2, r3
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	705a      	strb	r2, [r3, #1]
	set_time[2] = decToBcd(hour);
 80006ec:	1d7b      	adds	r3, r7, #5
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff ffa1 	bl	8000638 <decToBcd>
 80006f6:	0003      	movs	r3, r0
 80006f8:	001a      	movs	r2, r3
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	709a      	strb	r2, [r3, #2]
	set_time[3] = decToBcd(dow);
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	0018      	movs	r0, r3
 8000704:	f7ff ff98 	bl	8000638 <decToBcd>
 8000708:	0003      	movs	r3, r0
 800070a:	001a      	movs	r2, r3
 800070c:	193b      	adds	r3, r7, r4
 800070e:	70da      	strb	r2, [r3, #3]
	set_time[4] = decToBcd(dom);
 8000710:	2320      	movs	r3, #32
 8000712:	18fb      	adds	r3, r7, r3
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	0018      	movs	r0, r3
 8000718:	f7ff ff8e 	bl	8000638 <decToBcd>
 800071c:	0003      	movs	r3, r0
 800071e:	001a      	movs	r2, r3
 8000720:	193b      	adds	r3, r7, r4
 8000722:	711a      	strb	r2, [r3, #4]
	set_time[5] = decToBcd(month);
 8000724:	2324      	movs	r3, #36	@ 0x24
 8000726:	18fb      	adds	r3, r7, r3
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	0018      	movs	r0, r3
 800072c:	f7ff ff84 	bl	8000638 <decToBcd>
 8000730:	0003      	movs	r3, r0
 8000732:	001a      	movs	r2, r3
 8000734:	193b      	adds	r3, r7, r4
 8000736:	715a      	strb	r2, [r3, #5]
	set_time[6] = decToBcd(year);
 8000738:	2328      	movs	r3, #40	@ 0x28
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	0018      	movs	r0, r3
 8000740:	f7ff ff7a 	bl	8000638 <decToBcd>
 8000744:	0003      	movs	r3, r0
 8000746:	001a      	movs	r2, r3
 8000748:	193b      	adds	r3, r7, r4
 800074a:	719a      	strb	r2, [r3, #6]

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 800074c:	4808      	ldr	r0, [pc, #32]	@ (8000770 <Set_Time+0xd0>)
 800074e:	23fa      	movs	r3, #250	@ 0xfa
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	9302      	str	r3, [sp, #8]
 8000754:	2307      	movs	r3, #7
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	193b      	adds	r3, r7, r4
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	2200      	movs	r2, #0
 8000760:	21d0      	movs	r1, #208	@ 0xd0
 8000762:	f001 f987 	bl	8001a74 <HAL_I2C_Mem_Write>
}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b004      	add	sp, #16
 800076c:	bdb0      	pop	{r4, r5, r7, pc}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	20000094 	.word	0x20000094

08000774 <Get_Time>:
void Get_Time (void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 800077a:	4828      	ldr	r0, [pc, #160]	@ (800081c <Get_Time+0xa8>)
 800077c:	23fa      	movs	r3, #250	@ 0xfa
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	9302      	str	r3, [sp, #8]
 8000782:	2307      	movs	r3, #7
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	003b      	movs	r3, r7
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2301      	movs	r3, #1
 800078c:	2200      	movs	r2, #0
 800078e:	21d0      	movs	r1, #208	@ 0xd0
 8000790:	f001 fa9e 	bl	8001cd0 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8000794:	003b      	movs	r3, r7
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff ff67 	bl	800066c <bcdToDec>
 800079e:	0003      	movs	r3, r0
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <Get_Time+0xac>)
 80007a4:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 80007a6:	003b      	movs	r3, r7
 80007a8:	785b      	ldrb	r3, [r3, #1]
 80007aa:	0018      	movs	r0, r3
 80007ac:	f7ff ff5e 	bl	800066c <bcdToDec>
 80007b0:	0003      	movs	r3, r0
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <Get_Time+0xac>)
 80007b6:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 80007b8:	003b      	movs	r3, r7
 80007ba:	789b      	ldrb	r3, [r3, #2]
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff ff55 	bl	800066c <bcdToDec>
 80007c2:	0003      	movs	r3, r0
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <Get_Time+0xac>)
 80007c8:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 80007ca:	003b      	movs	r3, r7
 80007cc:	78db      	ldrb	r3, [r3, #3]
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff ff4c 	bl	800066c <bcdToDec>
 80007d4:	0003      	movs	r3, r0
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <Get_Time+0xac>)
 80007da:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80007dc:	003b      	movs	r3, r7
 80007de:	791b      	ldrb	r3, [r3, #4]
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff ff43 	bl	800066c <bcdToDec>
 80007e6:	0003      	movs	r3, r0
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <Get_Time+0xac>)
 80007ec:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 80007ee:	003b      	movs	r3, r7
 80007f0:	795b      	ldrb	r3, [r3, #5]
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff ff3a 	bl	800066c <bcdToDec>
 80007f8:	0003      	movs	r3, r0
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <Get_Time+0xac>)
 80007fe:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8000800:	003b      	movs	r3, r7
 8000802:	799b      	ldrb	r3, [r3, #6]
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff ff31 	bl	800066c <bcdToDec>
 800080a:	0003      	movs	r3, r0
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b04      	ldr	r3, [pc, #16]	@ (8000820 <Get_Time+0xac>)
 8000810:	719a      	strb	r2, [r3, #6]
}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	20000094 	.word	0x20000094
 8000820:	200000e8 	.word	0x200000e8

08000824 <gws>:


int TEMP;
char buffer[15];
void gws()
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
lcd_init();
 8000828:	f7ff fea5 	bl	8000576 <lcd_init>
LCDClear();
 800082c:	f7ff fee1 	bl	80005f2 <LCDClear>
lcd_put_cur(1, 1);
 8000830:	2101      	movs	r1, #1
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff fe80 	bl	8000538 <lcd_put_cur>
LCDSendString("Stay Healthy :)");
 8000838:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <gws+0x4c>)
 800083a:	0018      	movs	r0, r3
 800083c:	f7ff fee4 	bl	8000608 <LCDSendString>
HAL_Delay(500);//
 8000840:	23fa      	movs	r3, #250	@ 0xfa
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	0018      	movs	r0, r3
 8000846:	f000 fdf9 	bl	800143c <HAL_Delay>
 LCDClear();
 800084a:	f7ff fed2 	bl	80005f2 <LCDClear>
lcd_put_cur(0, 1);
 800084e:	2101      	movs	r1, #1
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff fe71 	bl	8000538 <lcd_put_cur>
LCDSendString("Get Well Soon");// wish
 8000856:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <gws+0x50>)
 8000858:	0018      	movs	r0, r3
 800085a:	f7ff fed5 	bl	8000608 <LCDSendString>
HAL_Delay(400);
 800085e:	23c8      	movs	r3, #200	@ 0xc8
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	0018      	movs	r0, r3
 8000864:	f000 fdea 	bl	800143c <HAL_Delay>
}
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	08003bb4 	.word	0x08003bb4
 8000874:	08003bc4 	.word	0x08003bc4

08000878 <am8>:


void am8()
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	if(time.hour==12)
 800087c:	4b1f      	ldr	r3, [pc, #124]	@ (80008fc <am8+0x84>)
 800087e:	789b      	ldrb	r3, [r3, #2]
 8000880:	2b0c      	cmp	r3, #12
 8000882:	d138      	bne.n	80008f6 <am8+0x7e>
	{
		if(time.minutes==05)
 8000884:	4b1d      	ldr	r3, [pc, #116]	@ (80008fc <am8+0x84>)
 8000886:	785b      	ldrb	r3, [r3, #1]
 8000888:	2b05      	cmp	r3, #5
 800088a:	d134      	bne.n	80008f6 <am8+0x7e>
		{

		if(time.seconds<=30)
 800088c:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <am8+0x84>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b1e      	cmp	r3, #30
 8000892:	d830      	bhi.n	80008f6 <am8+0x7e>
		{
			  		          {


			  		        	  for(x=1;x<15;x++)
 8000894:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <am8+0x88>)
 8000896:	2201      	movs	r2, #1
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	e025      	b.n	80008e8 <am8+0x70>
			  		        	  {


			  		          HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800089c:	4b19      	ldr	r3, [pc, #100]	@ (8000904 <am8+0x8c>)
 800089e:	2201      	movs	r2, #1
 80008a0:	2140      	movs	r1, #64	@ 0x40
 80008a2:	0018      	movs	r0, r3
 80008a4:	f001 f823 	bl	80018ee <HAL_GPIO_WritePin>
			  		          HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80008a8:	2380      	movs	r3, #128	@ 0x80
 80008aa:	0119      	lsls	r1, r3, #4
 80008ac:	23a0      	movs	r3, #160	@ 0xa0
 80008ae:	05db      	lsls	r3, r3, #23
 80008b0:	2201      	movs	r2, #1
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 f81b 	bl	80018ee <HAL_GPIO_WritePin>
			  		          HAL_Delay(500);
 80008b8:	23fa      	movs	r3, #250	@ 0xfa
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 fdbd 	bl	800143c <HAL_Delay>
			  		         		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <am8+0x8c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	2140      	movs	r1, #64	@ 0x40
 80008c8:	0018      	movs	r0, r3
 80008ca:	f001 f810 	bl	80018ee <HAL_GPIO_WritePin>
			  		         		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008ce:	2380      	movs	r3, #128	@ 0x80
 80008d0:	0119      	lsls	r1, r3, #4
 80008d2:	23a0      	movs	r3, #160	@ 0xa0
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	2200      	movs	r2, #0
 80008d8:	0018      	movs	r0, r3
 80008da:	f001 f808 	bl	80018ee <HAL_GPIO_WritePin>
			  		        	  for(x=1;x<15;x++)
 80008de:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <am8+0x88>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	1c5a      	adds	r2, r3, #1
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <am8+0x88>)
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <am8+0x88>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b0e      	cmp	r3, #14
 80008ee:	ddd5      	ble.n	800089c <am8+0x24>



			  		        	  }
			  		        	  val=0;
 80008f0:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <am8+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]

			  		          }
	}
		}

	   	}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000e8 	.word	0x200000e8
 8000900:	2000007c 	.word	0x2000007c
 8000904:	50000800 	.word	0x50000800
 8000908:	20000000 	.word	0x20000000

0800090c <pm2>:
void pm2()
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	if(time.hour==8)
 8000910:	4b3c      	ldr	r3, [pc, #240]	@ (8000a04 <pm2+0xf8>)
 8000912:	789b      	ldrb	r3, [r3, #2]
 8000914:	2b08      	cmp	r3, #8
 8000916:	d135      	bne.n	8000984 <pm2+0x78>
		{
			if(time.minutes==00)
 8000918:	4b3a      	ldr	r3, [pc, #232]	@ (8000a04 <pm2+0xf8>)
 800091a:	785b      	ldrb	r3, [r3, #1]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d131      	bne.n	8000984 <pm2+0x78>
			{

			if(time.seconds<=30)
 8000920:	4b38      	ldr	r3, [pc, #224]	@ (8000a04 <pm2+0xf8>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b1e      	cmp	r3, #30
 8000926:	d82d      	bhi.n	8000984 <pm2+0x78>
			{
				  		          {


				  		        	  	for(y=0;y<15;y++)
 8000928:	4b37      	ldr	r3, [pc, #220]	@ (8000a08 <pm2+0xfc>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	e025      	b.n	800097c <pm2+0x70>
				  		        	  	{

				  		          HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000930:	4b36      	ldr	r3, [pc, #216]	@ (8000a0c <pm2+0x100>)
 8000932:	2201      	movs	r2, #1
 8000934:	2140      	movs	r1, #64	@ 0x40
 8000936:	0018      	movs	r0, r3
 8000938:	f000 ffd9 	bl	80018ee <HAL_GPIO_WritePin>
				  		          HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800093c:	2380      	movs	r3, #128	@ 0x80
 800093e:	0119      	lsls	r1, r3, #4
 8000940:	23a0      	movs	r3, #160	@ 0xa0
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	2201      	movs	r2, #1
 8000946:	0018      	movs	r0, r3
 8000948:	f000 ffd1 	bl	80018ee <HAL_GPIO_WritePin>
				  		         		  HAL_Delay(500);
 800094c:	23fa      	movs	r3, #250	@ 0xfa
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	0018      	movs	r0, r3
 8000952:	f000 fd73 	bl	800143c <HAL_Delay>
				  		         		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000956:	4b2d      	ldr	r3, [pc, #180]	@ (8000a0c <pm2+0x100>)
 8000958:	2200      	movs	r2, #0
 800095a:	2140      	movs	r1, #64	@ 0x40
 800095c:	0018      	movs	r0, r3
 800095e:	f000 ffc6 	bl	80018ee <HAL_GPIO_WritePin>
				  		         		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000962:	2380      	movs	r3, #128	@ 0x80
 8000964:	0119      	lsls	r1, r3, #4
 8000966:	23a0      	movs	r3, #160	@ 0xa0
 8000968:	05db      	lsls	r3, r3, #23
 800096a:	2200      	movs	r2, #0
 800096c:	0018      	movs	r0, r3
 800096e:	f000 ffbe 	bl	80018ee <HAL_GPIO_WritePin>
				  		        	  	for(y=0;y<15;y++)
 8000972:	4b25      	ldr	r3, [pc, #148]	@ (8000a08 <pm2+0xfc>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	4b23      	ldr	r3, [pc, #140]	@ (8000a08 <pm2+0xfc>)
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	4b22      	ldr	r3, [pc, #136]	@ (8000a08 <pm2+0xfc>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b0e      	cmp	r3, #14
 8000982:	ddd5      	ble.n	8000930 <pm2+0x24>
			}

				  		          }
		}
			}
	if(time.hour==14)
 8000984:	4b1f      	ldr	r3, [pc, #124]	@ (8000a04 <pm2+0xf8>)
 8000986:	789b      	ldrb	r3, [r3, #2]
 8000988:	2b0e      	cmp	r3, #14
 800098a:	d138      	bne.n	80009fe <pm2+0xf2>
		{
			if(time.minutes==00)
 800098c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a04 <pm2+0xf8>)
 800098e:	785b      	ldrb	r3, [r3, #1]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d134      	bne.n	80009fe <pm2+0xf2>
			{

			if(time.seconds<=30)
 8000994:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <pm2+0xf8>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b1e      	cmp	r3, #30
 800099a:	d830      	bhi.n	80009fe <pm2+0xf2>
			{



				for(y=0;y<15;y++)
 800099c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <pm2+0xfc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	e025      	b.n	80009f0 <pm2+0xe4>
				{

				  		          HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80009a4:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <pm2+0x100>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	2140      	movs	r1, #64	@ 0x40
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 ff9f 	bl	80018ee <HAL_GPIO_WritePin>
				  		          HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80009b0:	2380      	movs	r3, #128	@ 0x80
 80009b2:	0119      	lsls	r1, r3, #4
 80009b4:	23a0      	movs	r3, #160	@ 0xa0
 80009b6:	05db      	lsls	r3, r3, #23
 80009b8:	2201      	movs	r2, #1
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 ff97 	bl	80018ee <HAL_GPIO_WritePin>
				  		         		  HAL_Delay(2000);
 80009c0:	23fa      	movs	r3, #250	@ 0xfa
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	0018      	movs	r0, r3
 80009c6:	f000 fd39 	bl	800143c <HAL_Delay>

				  		         		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <pm2+0x100>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	2140      	movs	r1, #64	@ 0x40
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 ff8c 	bl	80018ee <HAL_GPIO_WritePin>
				  		         		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009d6:	2380      	movs	r3, #128	@ 0x80
 80009d8:	0119      	lsls	r1, r3, #4
 80009da:	23a0      	movs	r3, #160	@ 0xa0
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	2200      	movs	r2, #0
 80009e0:	0018      	movs	r0, r3
 80009e2:	f000 ff84 	bl	80018ee <HAL_GPIO_WritePin>
				for(y=0;y<15;y++)
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <pm2+0xfc>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <pm2+0xfc>)
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <pm2+0xfc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b0e      	cmp	r3, #14
 80009f6:	ddd5      	ble.n	80009a4 <pm2+0x98>




				}
				val=0;
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <pm2+0x104>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]

			}

				  		          }
		}
			}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200000e8 	.word	0x200000e8
 8000a08:	20000080 	.word	0x20000080
 8000a0c:	50000800 	.word	0x50000800
 8000a10:	20000000 	.word	0x20000000

08000a14 <pm8>:
void pm8()
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	if(time.hour==8)
 8000a18:	4b5a      	ldr	r3, [pc, #360]	@ (8000b84 <pm8+0x170>)
 8000a1a:	789b      	ldrb	r3, [r3, #2]
 8000a1c:	2b08      	cmp	r3, #8
 8000a1e:	d135      	bne.n	8000a8c <pm8+0x78>
		{
			if(time.minutes==00)
 8000a20:	4b58      	ldr	r3, [pc, #352]	@ (8000b84 <pm8+0x170>)
 8000a22:	785b      	ldrb	r3, [r3, #1]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d131      	bne.n	8000a8c <pm8+0x78>
			{

			if(time.seconds<=30)
 8000a28:	4b56      	ldr	r3, [pc, #344]	@ (8000b84 <pm8+0x170>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b1e      	cmp	r3, #30
 8000a2e:	d82d      	bhi.n	8000a8c <pm8+0x78>
			{
				  		          {


				  		        	  	for(y=0;y<15;y++)
 8000a30:	4b55      	ldr	r3, [pc, #340]	@ (8000b88 <pm8+0x174>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	e025      	b.n	8000a84 <pm8+0x70>
				  		        	  	{

				  		          HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000a38:	4b54      	ldr	r3, [pc, #336]	@ (8000b8c <pm8+0x178>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2140      	movs	r1, #64	@ 0x40
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 ff55 	bl	80018ee <HAL_GPIO_WritePin>
				  		          HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000a44:	2380      	movs	r3, #128	@ 0x80
 8000a46:	0119      	lsls	r1, r3, #4
 8000a48:	23a0      	movs	r3, #160	@ 0xa0
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 ff4d 	bl	80018ee <HAL_GPIO_WritePin>
				  		         		  HAL_Delay(500);
 8000a54:	23fa      	movs	r3, #250	@ 0xfa
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f000 fcef 	bl	800143c <HAL_Delay>
				  		         		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000a5e:	4b4b      	ldr	r3, [pc, #300]	@ (8000b8c <pm8+0x178>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	2140      	movs	r1, #64	@ 0x40
 8000a64:	0018      	movs	r0, r3
 8000a66:	f000 ff42 	bl	80018ee <HAL_GPIO_WritePin>
				  		         		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a6a:	2380      	movs	r3, #128	@ 0x80
 8000a6c:	0119      	lsls	r1, r3, #4
 8000a6e:	23a0      	movs	r3, #160	@ 0xa0
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	2200      	movs	r2, #0
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 ff3a 	bl	80018ee <HAL_GPIO_WritePin>
				  		        	  	for(y=0;y<15;y++)
 8000a7a:	4b43      	ldr	r3, [pc, #268]	@ (8000b88 <pm8+0x174>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	1c5a      	adds	r2, r3, #1
 8000a80:	4b41      	ldr	r3, [pc, #260]	@ (8000b88 <pm8+0x174>)
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	4b40      	ldr	r3, [pc, #256]	@ (8000b88 <pm8+0x174>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b0e      	cmp	r3, #14
 8000a8a:	ddd5      	ble.n	8000a38 <pm8+0x24>
			}

				  		          }
		}
			}
	if(time.hour==14)
 8000a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b84 <pm8+0x170>)
 8000a8e:	789b      	ldrb	r3, [r3, #2]
 8000a90:	2b0e      	cmp	r3, #14
 8000a92:	d135      	bne.n	8000b00 <pm8+0xec>
		{
			if(time.minutes==00)
 8000a94:	4b3b      	ldr	r3, [pc, #236]	@ (8000b84 <pm8+0x170>)
 8000a96:	785b      	ldrb	r3, [r3, #1]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d131      	bne.n	8000b00 <pm8+0xec>
			{

			if(time.seconds<=30)
 8000a9c:	4b39      	ldr	r3, [pc, #228]	@ (8000b84 <pm8+0x170>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b1e      	cmp	r3, #30
 8000aa2:	d82d      	bhi.n	8000b00 <pm8+0xec>
			{



				for(y=0;y<15;y++)
 8000aa4:	4b38      	ldr	r3, [pc, #224]	@ (8000b88 <pm8+0x174>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	e025      	b.n	8000af8 <pm8+0xe4>
				{

				  		          HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000aac:	4b37      	ldr	r3, [pc, #220]	@ (8000b8c <pm8+0x178>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2140      	movs	r1, #64	@ 0x40
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 ff1b 	bl	80018ee <HAL_GPIO_WritePin>
				  		          HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000ab8:	2380      	movs	r3, #128	@ 0x80
 8000aba:	0119      	lsls	r1, r3, #4
 8000abc:	23a0      	movs	r3, #160	@ 0xa0
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 ff13 	bl	80018ee <HAL_GPIO_WritePin>
				  		         		  HAL_Delay(2000);
 8000ac8:	23fa      	movs	r3, #250	@ 0xfa
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	0018      	movs	r0, r3
 8000ace:	f000 fcb5 	bl	800143c <HAL_Delay>

				  		         		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b8c <pm8+0x178>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2140      	movs	r1, #64	@ 0x40
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f000 ff08 	bl	80018ee <HAL_GPIO_WritePin>
				  		         		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ade:	2380      	movs	r3, #128	@ 0x80
 8000ae0:	0119      	lsls	r1, r3, #4
 8000ae2:	23a0      	movs	r3, #160	@ 0xa0
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f000 ff00 	bl	80018ee <HAL_GPIO_WritePin>
				for(y=0;y<15;y++)
 8000aee:	4b26      	ldr	r3, [pc, #152]	@ (8000b88 <pm8+0x174>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	4b24      	ldr	r3, [pc, #144]	@ (8000b88 <pm8+0x174>)
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	4b23      	ldr	r3, [pc, #140]	@ (8000b88 <pm8+0x174>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b0e      	cmp	r3, #14
 8000afe:	ddd5      	ble.n	8000aac <pm8+0x98>

			}

				  		          }
		}
	if(time.hour==20)
 8000b00:	4b20      	ldr	r3, [pc, #128]	@ (8000b84 <pm8+0x170>)
 8000b02:	789b      	ldrb	r3, [r3, #2]
 8000b04:	2b14      	cmp	r3, #20
 8000b06:	d13a      	bne.n	8000b7e <pm8+0x16a>
			{
				if(time.minutes==00)
 8000b08:	4b1e      	ldr	r3, [pc, #120]	@ (8000b84 <pm8+0x170>)
 8000b0a:	785b      	ldrb	r3, [r3, #1]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d136      	bne.n	8000b7e <pm8+0x16a>
				{

				if(time.seconds<=30)
 8000b10:	4b1c      	ldr	r3, [pc, #112]	@ (8000b84 <pm8+0x170>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b1e      	cmp	r3, #30
 8000b16:	d832      	bhi.n	8000b7e <pm8+0x16a>
				{



					for(y=0;y<15;y++)
 8000b18:	4b1b      	ldr	r3, [pc, #108]	@ (8000b88 <pm8+0x174>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	e025      	b.n	8000b6c <pm8+0x158>
					{

					  		          HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000b20:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <pm8+0x178>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	2140      	movs	r1, #64	@ 0x40
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fee1 	bl	80018ee <HAL_GPIO_WritePin>
					  		          HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000b2c:	2380      	movs	r3, #128	@ 0x80
 8000b2e:	0119      	lsls	r1, r3, #4
 8000b30:	23a0      	movs	r3, #160	@ 0xa0
 8000b32:	05db      	lsls	r3, r3, #23
 8000b34:	2201      	movs	r2, #1
 8000b36:	0018      	movs	r0, r3
 8000b38:	f000 fed9 	bl	80018ee <HAL_GPIO_WritePin>
					  		         		  HAL_Delay(2000);
 8000b3c:	23fa      	movs	r3, #250	@ 0xfa
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	0018      	movs	r0, r3
 8000b42:	f000 fc7b 	bl	800143c <HAL_Delay>

					  		         		  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000b46:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <pm8+0x178>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2140      	movs	r1, #64	@ 0x40
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f000 fece 	bl	80018ee <HAL_GPIO_WritePin>
					  		         		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b52:	2380      	movs	r3, #128	@ 0x80
 8000b54:	0119      	lsls	r1, r3, #4
 8000b56:	23a0      	movs	r3, #160	@ 0xa0
 8000b58:	05db      	lsls	r3, r3, #23
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f000 fec6 	bl	80018ee <HAL_GPIO_WritePin>
					for(y=0;y<15;y++)
 8000b62:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <pm8+0x174>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <pm8+0x174>)
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <pm8+0x174>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b0e      	cmp	r3, #14
 8000b72:	ddd5      	ble.n	8000b20 <pm8+0x10c>




					}
					y++;
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <pm8+0x174>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	1c5a      	adds	r2, r3, #1
 8000b7a:	4b03      	ldr	r3, [pc, #12]	@ (8000b88 <pm8+0x174>)
 8000b7c:	601a      	str	r2, [r3, #0]

				}

					  		          }
			}
			}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000e8 	.word	0x200000e8
 8000b88:	20000080 	.word	0x20000080
 8000b8c:	50000800 	.word	0x50000800

08000b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b96:	f000 fbcb 	bl	8001330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9a:	f000 f96b 	bl	8000e74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9e:	f000 fa03 	bl	8000fa8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ba2:	f000 f9c1 	bl	8000f28 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 8000ba6:	f7ff fce6 	bl	8000576 <lcd_init>
  Set_Time(00, 14, 13, 1, 05, 05, 24);
 8000baa:	2318      	movs	r3, #24
 8000bac:	9302      	str	r3, [sp, #8]
 8000bae:	2305      	movs	r3, #5
 8000bb0:	9301      	str	r3, [sp, #4]
 8000bb2:	2305      	movs	r3, #5
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	220d      	movs	r2, #13
 8000bba:	210e      	movs	r1, #14
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff fd6f 	bl	80006a0 <Set_Time>

  lcd_put_cur(0, 0);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f7ff fcb7 	bl	8000538 <lcd_put_cur>
  LCDSendString("Welcome To Our");
 8000bca:	4b97      	ldr	r3, [pc, #604]	@ (8000e28 <main+0x298>)
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff fd1b 	bl	8000608 <LCDSendString>
  HAL_Delay(1000);
 8000bd2:	23fa      	movs	r3, #250	@ 0xfa
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 fc30 	bl	800143c <HAL_Delay>
  LCDClear();// print a messege at startup
 8000bdc:	f7ff fd09 	bl	80005f2 <LCDClear>
    lcd_put_cur(0, 0);
 8000be0:	2100      	movs	r1, #0
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff fca8 	bl	8000538 <lcd_put_cur>
    LCDSendString("Medicine");
 8000be8:	4b90      	ldr	r3, [pc, #576]	@ (8000e2c <main+0x29c>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f7ff fd0c 	bl	8000608 <LCDSendString>
    HAL_Delay(1000);
 8000bf0:	23fa      	movs	r3, #250	@ 0xfa
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f000 fc21 	bl	800143c <HAL_Delay>
    LCDClear();
 8000bfa:	f7ff fcfa 	bl	80005f2 <LCDClear>

    lcd_put_cur(0, 0);
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2000      	movs	r0, #0
 8000c02:	f7ff fc99 	bl	8000538 <lcd_put_cur>
        LCDSendString("Reminder!!");
 8000c06:	4b8a      	ldr	r3, [pc, #552]	@ (8000e30 <main+0x2a0>)
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff fcfd 	bl	8000608 <LCDSendString>
        HAL_Delay(1000);
 8000c0e:	23fa      	movs	r3, #250	@ 0xfa
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	0018      	movs	r0, r3
 8000c14:	f000 fc12 	bl	800143c <HAL_Delay>
    gws();
 8000c18:	f7ff fe04 	bl	8000824 <gws>
     HAL_Delay(2000);
 8000c1c:	23fa      	movs	r3, #250	@ 0xfa
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	0018      	movs	r0, r3
 8000c22:	f000 fc0b 	bl	800143c <HAL_Delay>
     LCDClear();
 8000c26:	f7ff fce4 	bl	80005f2 <LCDClear>
     lcd_put_cur(0, 1);
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff fc83 	bl	8000538 <lcd_put_cur>
     LCDSendString("Press buttons!");
 8000c32:	4b80      	ldr	r3, [pc, #512]	@ (8000e34 <main+0x2a4>)
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff fce7 	bl	8000608 <LCDSendString>

     HAL_Delay(1000);
 8000c3a:	23fa      	movs	r3, #250	@ 0xfa
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 fbfc 	bl	800143c <HAL_Delay>
     LCDClear();
 8000c44:	f7ff fcd5 	bl	80005f2 <LCDClear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  k1=HAL_GPIO_ReadPin(SW1_GPIO_Port,SW1_Pin);
 8000c48:	2380      	movs	r3, #128	@ 0x80
 8000c4a:	005a      	lsls	r2, r3, #1
 8000c4c:	23a0      	movs	r3, #160	@ 0xa0
 8000c4e:	05db      	lsls	r3, r3, #23
 8000c50:	0011      	movs	r1, r2
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 fe2e 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	001a      	movs	r2, r3
 8000c5c:	4b76      	ldr	r3, [pc, #472]	@ (8000e38 <main+0x2a8>)
 8000c5e:	601a      	str	r2, [r3, #0]
	     	  	  	  k2=HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin);
 8000c60:	4b76      	ldr	r3, [pc, #472]	@ (8000e3c <main+0x2ac>)
 8000c62:	2104      	movs	r1, #4
 8000c64:	0018      	movs	r0, r3
 8000c66:	f000 fe25 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000c6a:	0003      	movs	r3, r0
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	4b74      	ldr	r3, [pc, #464]	@ (8000e40 <main+0x2b0>)
 8000c70:	601a      	str	r2, [r3, #0]
	     	  	  	  k3=HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin);
 8000c72:	4b72      	ldr	r3, [pc, #456]	@ (8000e3c <main+0x2ac>)
 8000c74:	2102      	movs	r1, #2
 8000c76:	0018      	movs	r0, r3
 8000c78:	f000 fe1c 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	001a      	movs	r2, r3
 8000c80:	4b70      	ldr	r3, [pc, #448]	@ (8000e44 <main+0x2b4>)
 8000c82:	601a      	str	r2, [r3, #0]
	     	  	  	  k4=HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin);
 8000c84:	4b6d      	ldr	r3, [pc, #436]	@ (8000e3c <main+0x2ac>)
 8000c86:	2101      	movs	r1, #1
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f000 fe13 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	001a      	movs	r2, r3
 8000c92:	4b6d      	ldr	r3, [pc, #436]	@ (8000e48 <main+0x2b8>)
 8000c94:	601a      	str	r2, [r3, #0]


	  Get_Time();
 8000c96:	f7ff fd6d 	bl	8000774 <Get_Time>
	  	  sprintf (buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8000c9a:	4b6c      	ldr	r3, [pc, #432]	@ (8000e4c <main+0x2bc>)
 8000c9c:	789b      	ldrb	r3, [r3, #2]
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	4b6a      	ldr	r3, [pc, #424]	@ (8000e4c <main+0x2bc>)
 8000ca2:	785b      	ldrb	r3, [r3, #1]
 8000ca4:	001c      	movs	r4, r3
 8000ca6:	4b69      	ldr	r3, [pc, #420]	@ (8000e4c <main+0x2bc>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	4969      	ldr	r1, [pc, #420]	@ (8000e50 <main+0x2c0>)
 8000cac:	4869      	ldr	r0, [pc, #420]	@ (8000e54 <main+0x2c4>)
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	0023      	movs	r3, r4
 8000cb2:	f002 fad5 	bl	8003260 <siprintf>
	  	  lcd_put_cur (0,0);
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff fc3d 	bl	8000538 <lcd_put_cur>
	  	  LCDSendString(buffer);
 8000cbe:	4b65      	ldr	r3, [pc, #404]	@ (8000e54 <main+0x2c4>)
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff fca1 	bl	8000608 <LCDSendString>

	  	  sprintf (buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8000cc6:	4b61      	ldr	r3, [pc, #388]	@ (8000e4c <main+0x2bc>)
 8000cc8:	791b      	ldrb	r3, [r3, #4]
 8000cca:	001a      	movs	r2, r3
 8000ccc:	4b5f      	ldr	r3, [pc, #380]	@ (8000e4c <main+0x2bc>)
 8000cce:	795b      	ldrb	r3, [r3, #5]
 8000cd0:	001c      	movs	r4, r3
 8000cd2:	4b5e      	ldr	r3, [pc, #376]	@ (8000e4c <main+0x2bc>)
 8000cd4:	799b      	ldrb	r3, [r3, #6]
 8000cd6:	4960      	ldr	r1, [pc, #384]	@ (8000e58 <main+0x2c8>)
 8000cd8:	485e      	ldr	r0, [pc, #376]	@ (8000e54 <main+0x2c4>)
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	0023      	movs	r3, r4
 8000cde:	f002 fabf 	bl	8003260 <siprintf>
	  	  lcd_put_cur(1, 0);
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f7ff fc27 	bl	8000538 <lcd_put_cur>
	  	 LCDSendString(buffer);
 8000cea:	4b5a      	ldr	r3, [pc, #360]	@ (8000e54 <main+0x2c4>)
 8000cec:	0018      	movs	r0, r3
 8000cee:	f7ff fc8b 	bl	8000608 <LCDSendString>



	  			  HAL_Delay(500);
 8000cf2:	23fa      	movs	r3, #250	@ 0xfa
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 fba0 	bl	800143c <HAL_Delay>
	  			  if(k1==GPIO_PIN_RESET)
 8000cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8000e38 <main+0x2a8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <main+0x17a>
	  			  {
	  				  val=1;
 8000d04:	4b55      	ldr	r3, [pc, #340]	@ (8000e5c <main+0x2cc>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	601a      	str	r2, [r3, #0]

	  			  }

	  			   if(k2==GPIO_PIN_RESET)
 8000d0a:	4b4d      	ldr	r3, [pc, #308]	@ (8000e40 <main+0x2b0>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d102      	bne.n	8000d18 <main+0x188>
	  			  {
	  				  val=2;
 8000d12:	4b52      	ldr	r3, [pc, #328]	@ (8000e5c <main+0x2cc>)
 8000d14:	2202      	movs	r2, #2
 8000d16:	601a      	str	r2, [r3, #0]
	  			  }
	  			   if(k3==GPIO_PIN_RESET)
 8000d18:	4b4a      	ldr	r3, [pc, #296]	@ (8000e44 <main+0x2b4>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <main+0x196>
	  			   {
	  				   val=3;
 8000d20:	4b4e      	ldr	r3, [pc, #312]	@ (8000e5c <main+0x2cc>)
 8000d22:	2203      	movs	r2, #3
 8000d24:	601a      	str	r2, [r3, #0]
	  			   }
	  			   if(k4==GPIO_PIN_RESET)
 8000d26:	4b48      	ldr	r3, [pc, #288]	@ (8000e48 <main+0x2b8>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <main+0x1a4>
	  			   {
	  				   val=0;
 8000d2e:	4b4b      	ldr	r3, [pc, #300]	@ (8000e5c <main+0x2cc>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
	  			   }
	  			   if(val==1)
 8000d34:	4b49      	ldr	r3, [pc, #292]	@ (8000e5c <main+0x2cc>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d114      	bne.n	8000d66 <main+0x1d6>
	  			   {

	  				   LCDClear();
 8000d3c:	f7ff fc59 	bl	80005f2 <LCDClear>
	  				   lcd_put_cur(0, 1);
 8000d40:	2101      	movs	r1, #1
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff fbf8 	bl	8000538 <lcd_put_cur>
	  				   LCDSendString("Alarm at 8 am!");
 8000d48:	4b45      	ldr	r3, [pc, #276]	@ (8000e60 <main+0x2d0>)
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff fc5c 	bl	8000608 <LCDSendString>
	  				   HAL_Delay(500);
 8000d50:	23fa      	movs	r3, #250	@ 0xfa
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	0018      	movs	r0, r3
 8000d56:	f000 fb71 	bl	800143c <HAL_Delay>
	  				   LCDClear();
 8000d5a:	f7ff fc4a 	bl	80005f2 <LCDClear>
	  				   am8();
 8000d5e:	f7ff fd8b 	bl	8000878 <am8>
	  				   LCDClear();
 8000d62:	f7ff fc46 	bl	80005f2 <LCDClear>

	  			   }

	  			if(val==2)
 8000d66:	4b3d      	ldr	r3, [pc, #244]	@ (8000e5c <main+0x2cc>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d123      	bne.n	8000db6 <main+0x226>
	  			{

	  				LCDClear();
 8000d6e:	f7ff fc40 	bl	80005f2 <LCDClear>
	  					  				   lcd_put_cur(0, 1);
 8000d72:	2101      	movs	r1, #1
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff fbdf 	bl	8000538 <lcd_put_cur>
	  					  				   LCDSendString("Alarm at 8 am!");
 8000d7a:	4b39      	ldr	r3, [pc, #228]	@ (8000e60 <main+0x2d0>)
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff fc43 	bl	8000608 <LCDSendString>
	  					  				   HAL_Delay(500);
 8000d82:	23fa      	movs	r3, #250	@ 0xfa
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	0018      	movs	r0, r3
 8000d88:	f000 fb58 	bl	800143c <HAL_Delay>
	  					  				   LCDClear();
 8000d8c:	f7ff fc31 	bl	80005f2 <LCDClear>

	  					  					  				   lcd_put_cur(0, 1);
 8000d90:	2101      	movs	r1, #1
 8000d92:	2000      	movs	r0, #0
 8000d94:	f7ff fbd0 	bl	8000538 <lcd_put_cur>
	  					  					  				   LCDSendString("Alarm at 2 pm!");
 8000d98:	4b32      	ldr	r3, [pc, #200]	@ (8000e64 <main+0x2d4>)
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f7ff fc34 	bl	8000608 <LCDSendString>
	  					  					  				   HAL_Delay(500);
 8000da0:	23fa      	movs	r3, #250	@ 0xfa
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	0018      	movs	r0, r3
 8000da6:	f000 fb49 	bl	800143c <HAL_Delay>
	  					  					  				   LCDClear();
 8000daa:	f7ff fc22 	bl	80005f2 <LCDClear>

	  				pm2();
 8000dae:	f7ff fdad 	bl	800090c <pm2>
	  				LCDClear();
 8000db2:	f7ff fc1e 	bl	80005f2 <LCDClear>

	  			}

	  			if(val==3)
 8000db6:	4b29      	ldr	r3, [pc, #164]	@ (8000e5c <main+0x2cc>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d000      	beq.n	8000dc0 <main+0x230>
 8000dbe:	e743      	b.n	8000c48 <main+0xb8>
	  				  			{

	  				  				LCDClear();
 8000dc0:	f7ff fc17 	bl	80005f2 <LCDClear>
	  				  					  				   lcd_put_cur(0, 1);
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f7ff fbb6 	bl	8000538 <lcd_put_cur>
	  				  					  				   LCDSendString("Alarm at 8 AM!");
 8000dcc:	4b26      	ldr	r3, [pc, #152]	@ (8000e68 <main+0x2d8>)
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff fc1a 	bl	8000608 <LCDSendString>
	  				  					  				   HAL_Delay(500);
 8000dd4:	23fa      	movs	r3, #250	@ 0xfa
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f000 fb2f 	bl	800143c <HAL_Delay>
	  				  					  				   LCDClear();
 8000dde:	f7ff fc08 	bl	80005f2 <LCDClear>

	  				  					  					  				   lcd_put_cur(0, 1);
 8000de2:	2101      	movs	r1, #1
 8000de4:	2000      	movs	r0, #0
 8000de6:	f7ff fba7 	bl	8000538 <lcd_put_cur>
	  				  					  					  				   LCDSendString("Alarm at 2 PM!");
 8000dea:	4b20      	ldr	r3, [pc, #128]	@ (8000e6c <main+0x2dc>)
 8000dec:	0018      	movs	r0, r3
 8000dee:	f7ff fc0b 	bl	8000608 <LCDSendString>
	  				  					  					  				   HAL_Delay(500);
 8000df2:	23fa      	movs	r3, #250	@ 0xfa
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 fb20 	bl	800143c <HAL_Delay>
	  				  					  					  				   LCDClear();
 8000dfc:	f7ff fbf9 	bl	80005f2 <LCDClear>
	  				  					  					  			  lcd_put_cur(0, 1);
 8000e00:	2101      	movs	r1, #1
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff fb98 	bl	8000538 <lcd_put_cur>
	  				  					  					  				  				  LCDSendString("Alarm at 8 PM!");
 8000e08:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <main+0x2e0>)
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f7ff fbfc 	bl	8000608 <LCDSendString>
	  				  					  					  				  				  		 HAL_Delay(500);
 8000e10:	23fa      	movs	r3, #250	@ 0xfa
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	0018      	movs	r0, r3
 8000e16:	f000 fb11 	bl	800143c <HAL_Delay>
	  				  					  					  				  				 LCDClear();
 8000e1a:	f7ff fbea 	bl	80005f2 <LCDClear>

	  				  				pm8();
 8000e1e:	f7ff fdf9 	bl	8000a14 <pm8>
	  				  				LCDClear();
 8000e22:	f7ff fbe6 	bl	80005f2 <LCDClear>
	  k1=HAL_GPIO_ReadPin(SW1_GPIO_Port,SW1_Pin);
 8000e26:	e70f      	b.n	8000c48 <main+0xb8>
 8000e28:	08003bd4 	.word	0x08003bd4
 8000e2c:	08003be4 	.word	0x08003be4
 8000e30:	08003bf0 	.word	0x08003bf0
 8000e34:	08003bfc 	.word	0x08003bfc
 8000e38:	20000084 	.word	0x20000084
 8000e3c:	50000400 	.word	0x50000400
 8000e40:	20000088 	.word	0x20000088
 8000e44:	2000008c 	.word	0x2000008c
 8000e48:	20000090 	.word	0x20000090
 8000e4c:	200000e8 	.word	0x200000e8
 8000e50:	08003c0c 	.word	0x08003c0c
 8000e54:	200000f0 	.word	0x200000f0
 8000e58:	08003c1c 	.word	0x08003c1c
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	08003c30 	.word	0x08003c30
 8000e64:	08003c40 	.word	0x08003c40
 8000e68:	08003c50 	.word	0x08003c50
 8000e6c:	08003c60 	.word	0x08003c60
 8000e70:	08003c70 	.word	0x08003c70

08000e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b093      	sub	sp, #76	@ 0x4c
 8000e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7a:	2414      	movs	r4, #20
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	0018      	movs	r0, r3
 8000e80:	2334      	movs	r3, #52	@ 0x34
 8000e82:	001a      	movs	r2, r3
 8000e84:	2100      	movs	r1, #0
 8000e86:	f002 fa0b 	bl	80032a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	2310      	movs	r3, #16
 8000e90:	001a      	movs	r2, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	f002 fa04 	bl	80032a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e98:	2380      	movs	r3, #128	@ 0x80
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f001 fbdf 	bl	8002660 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	2280      	movs	r2, #128	@ 0x80
 8000eac:	0052      	lsls	r2, r2, #1
 8000eae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000eb0:	0021      	movs	r1, r4
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2240      	movs	r2, #64	@ 0x40
 8000ebc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2200      	movs	r2, #0
 8000ece:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	2280      	movs	r2, #128	@ 0x80
 8000eda:	0292      	lsls	r2, r2, #10
 8000edc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	2280      	movs	r2, #128	@ 0x80
 8000ee2:	0592      	lsls	r2, r2, #22
 8000ee4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f001 fbf9 	bl	80026e0 <HAL_RCC_OscConfig>
 8000eee:	1e03      	subs	r3, r0, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ef2:	f000 f911 	bl	8001118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2207      	movs	r2, #7
 8000efa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2202      	movs	r2, #2
 8000f00:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2102      	movs	r1, #2
 8000f12:	0018      	movs	r0, r3
 8000f14:	f001 fef4 	bl	8002d00 <HAL_RCC_ClockConfig>
 8000f18:	1e03      	subs	r3, r0, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f1c:	f000 f8fc 	bl	8001118 <Error_Handler>
  }
}
 8000f20:	46c0      	nop			@ (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b013      	add	sp, #76	@ 0x4c
 8000f26:	bd90      	pop	{r4, r7, pc}

08000f28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <MX_I2C1_Init+0x74>)
 8000f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa0 <MX_I2C1_Init+0x78>)
 8000f30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000f32:	4b1a      	ldr	r3, [pc, #104]	@ (8000f9c <MX_I2C1_Init+0x74>)
 8000f34:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa4 <MX_I2C1_Init+0x7c>)
 8000f36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f38:	4b18      	ldr	r3, [pc, #96]	@ (8000f9c <MX_I2C1_Init+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f3e:	4b17      	ldr	r3, [pc, #92]	@ (8000f9c <MX_I2C1_Init+0x74>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f44:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <MX_I2C1_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <MX_I2C1_Init+0x74>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f50:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <MX_I2C1_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f56:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <MX_I2C1_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <MX_I2C1_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f62:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <MX_I2C1_Init+0x74>)
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 fcdf 	bl	8001928 <HAL_I2C_Init>
 8000f6a:	1e03      	subs	r3, r0, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f6e:	f000 f8d3 	bl	8001118 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f72:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <MX_I2C1_Init+0x74>)
 8000f74:	2100      	movs	r1, #0
 8000f76:	0018      	movs	r0, r3
 8000f78:	f001 fada 	bl	8002530 <HAL_I2CEx_ConfigAnalogFilter>
 8000f7c:	1e03      	subs	r3, r0, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f80:	f000 f8ca 	bl	8001118 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f84:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <MX_I2C1_Init+0x74>)
 8000f86:	2100      	movs	r1, #0
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f001 fb1d 	bl	80025c8 <HAL_I2CEx_ConfigDigitalFilter>
 8000f8e:	1e03      	subs	r3, r0, #0
 8000f90:	d001      	beq.n	8000f96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f92:	f000 f8c1 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000094 	.word	0x20000094
 8000fa0:	40005400 	.word	0x40005400
 8000fa4:	10707dbc 	.word	0x10707dbc

08000fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b08b      	sub	sp, #44	@ 0x2c
 8000fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	2414      	movs	r4, #20
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	2314      	movs	r3, #20
 8000fb6:	001a      	movs	r2, r3
 8000fb8:	2100      	movs	r1, #0
 8000fba:	f002 f971 	bl	80032a0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	4b52      	ldr	r3, [pc, #328]	@ (8001108 <MX_GPIO_Init+0x160>)
 8000fc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fc2:	4b51      	ldr	r3, [pc, #324]	@ (8001108 <MX_GPIO_Init+0x160>)
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fca:	4b4f      	ldr	r3, [pc, #316]	@ (8001108 <MX_GPIO_Init+0x160>)
 8000fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fce:	2204      	movs	r2, #4
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fd6:	4b4c      	ldr	r3, [pc, #304]	@ (8001108 <MX_GPIO_Init+0x160>)
 8000fd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fda:	4b4b      	ldr	r3, [pc, #300]	@ (8001108 <MX_GPIO_Init+0x160>)
 8000fdc:	2120      	movs	r1, #32
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fe2:	4b49      	ldr	r3, [pc, #292]	@ (8001108 <MX_GPIO_Init+0x160>)
 8000fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fe6:	2220      	movs	r2, #32
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	4b46      	ldr	r3, [pc, #280]	@ (8001108 <MX_GPIO_Init+0x160>)
 8000ff0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ff2:	4b45      	ldr	r3, [pc, #276]	@ (8001108 <MX_GPIO_Init+0x160>)
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ffa:	4b43      	ldr	r3, [pc, #268]	@ (8001108 <MX_GPIO_Init+0x160>)
 8000ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ffe:	2202      	movs	r2, #2
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b40      	ldr	r3, [pc, #256]	@ (8001108 <MX_GPIO_Init+0x160>)
 8001008:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800100a:	4b3f      	ldr	r3, [pc, #252]	@ (8001108 <MX_GPIO_Init+0x160>)
 800100c:	2101      	movs	r1, #1
 800100e:	430a      	orrs	r2, r1
 8001010:	635a      	str	r2, [r3, #52]	@ 0x34
 8001012:	4b3d      	ldr	r3, [pc, #244]	@ (8001108 <MX_GPIO_Init+0x160>)
 8001014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001016:	2201      	movs	r2, #1
 8001018:	4013      	ands	r3, r2
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800101e:	493b      	ldr	r1, [pc, #236]	@ (800110c <MX_GPIO_Init+0x164>)
 8001020:	4b3b      	ldr	r3, [pc, #236]	@ (8001110 <MX_GPIO_Init+0x168>)
 8001022:	2200      	movs	r2, #0
 8001024:	0018      	movs	r0, r3
 8001026:	f000 fc62 	bl	80018ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	0119      	lsls	r1, r3, #4
 800102e:	23a0      	movs	r3, #160	@ 0xa0
 8001030:	05db      	lsls	r3, r3, #23
 8001032:	2200      	movs	r2, #0
 8001034:	0018      	movs	r0, r3
 8001036:	f000 fc5a 	bl	80018ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800103a:	23ce      	movs	r3, #206	@ 0xce
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4835      	ldr	r0, [pc, #212]	@ (8001114 <MX_GPIO_Init+0x16c>)
 8001040:	2200      	movs	r2, #0
 8001042:	0019      	movs	r1, r3
 8001044:	f000 fc53 	bl	80018ee <HAL_GPIO_WritePin>
                          |RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = EN_Pin|BUZZER_Pin;
 8001048:	193b      	adds	r3, r7, r4
 800104a:	4a30      	ldr	r2, [pc, #192]	@ (800110c <MX_GPIO_Init+0x164>)
 800104c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	193b      	adds	r3, r7, r4
 8001050:	2201      	movs	r2, #1
 8001052:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	193b      	adds	r3, r7, r4
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	193b      	adds	r3, r7, r4
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001060:	193b      	adds	r3, r7, r4
 8001062:	4a2b      	ldr	r2, [pc, #172]	@ (8001110 <MX_GPIO_Init+0x168>)
 8001064:	0019      	movs	r1, r3
 8001066:	0010      	movs	r0, r2
 8001068:	f000 fac0 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SW4_Pin SW3_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin|SW2_Pin;
 800106c:	193b      	adds	r3, r7, r4
 800106e:	2207      	movs	r2, #7
 8001070:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001072:	193b      	adds	r3, r7, r4
 8001074:	2200      	movs	r2, #0
 8001076:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	193b      	adds	r3, r7, r4
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	193b      	adds	r3, r7, r4
 8001080:	4a24      	ldr	r2, [pc, #144]	@ (8001114 <MX_GPIO_Init+0x16c>)
 8001082:	0019      	movs	r1, r3
 8001084:	0010      	movs	r0, r2
 8001086:	f000 fab1 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	2280      	movs	r2, #128	@ 0x80
 800108e:	0052      	lsls	r2, r2, #1
 8001090:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001092:	193b      	adds	r3, r7, r4
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	193b      	adds	r3, r7, r4
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 800109e:	193a      	adds	r2, r7, r4
 80010a0:	23a0      	movs	r3, #160	@ 0xa0
 80010a2:	05db      	lsls	r3, r3, #23
 80010a4:	0011      	movs	r1, r2
 80010a6:	0018      	movs	r0, r3
 80010a8:	f000 faa0 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010ac:	0021      	movs	r1, r4
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	2280      	movs	r2, #128	@ 0x80
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	000c      	movs	r4, r1
 80010b8:	193b      	adds	r3, r7, r4
 80010ba:	2201      	movs	r2, #1
 80010bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	193b      	adds	r3, r7, r4
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	193b      	adds	r3, r7, r4
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010ca:	193a      	adds	r2, r7, r4
 80010cc:	23a0      	movs	r3, #160	@ 0xa0
 80010ce:	05db      	lsls	r3, r3, #23
 80010d0:	0011      	movs	r1, r2
 80010d2:	0018      	movs	r0, r3
 80010d4:	f000 fa8a 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           RS_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80010d8:	0021      	movs	r1, r4
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	22ce      	movs	r2, #206	@ 0xce
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	601a      	str	r2, [r3, #0]
                          |RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2201      	movs	r2, #1
 80010e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	4a07      	ldr	r2, [pc, #28]	@ (8001114 <MX_GPIO_Init+0x16c>)
 80010f8:	0019      	movs	r1, r3
 80010fa:	0010      	movs	r0, r2
 80010fc:	f000 fa76 	bl	80015ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001100:	46c0      	nop			@ (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b00b      	add	sp, #44	@ 0x2c
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	40021000 	.word	0x40021000
 800110c:	00004040 	.word	0x00004040
 8001110:	50000800 	.word	0x50000800
 8001114:	50000400 	.word	0x50000400

08001118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800111c:	b672      	cpsid	i
}
 800111e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001120:	46c0      	nop			@ (mov r8, r8)
 8001122:	e7fd      	b.n	8001120 <Error_Handler+0x8>

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <HAL_MspInit+0x44>)
 800112c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800112e:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <HAL_MspInit+0x44>)
 8001130:	2101      	movs	r1, #1
 8001132:	430a      	orrs	r2, r1
 8001134:	641a      	str	r2, [r3, #64]	@ 0x40
 8001136:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <HAL_MspInit+0x44>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	2201      	movs	r2, #1
 800113c:	4013      	ands	r3, r2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <HAL_MspInit+0x44>)
 8001144:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <HAL_MspInit+0x44>)
 8001148:	2180      	movs	r1, #128	@ 0x80
 800114a:	0549      	lsls	r1, r1, #21
 800114c:	430a      	orrs	r2, r1
 800114e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <HAL_MspInit+0x44>)
 8001152:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	055b      	lsls	r3, r3, #21
 8001158:	4013      	ands	r3, r2
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	46c0      	nop			@ (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	b002      	add	sp, #8
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			@ (mov r8, r8)
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b091      	sub	sp, #68	@ 0x44
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	232c      	movs	r3, #44	@ 0x2c
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	0018      	movs	r0, r3
 800117a:	2314      	movs	r3, #20
 800117c:	001a      	movs	r2, r3
 800117e:	2100      	movs	r1, #0
 8001180:	f002 f88e 	bl	80032a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001184:	2414      	movs	r4, #20
 8001186:	193b      	adds	r3, r7, r4
 8001188:	0018      	movs	r0, r3
 800118a:	2318      	movs	r3, #24
 800118c:	001a      	movs	r2, r3
 800118e:	2100      	movs	r1, #0
 8001190:	f002 f886 	bl	80032a0 <memset>
  if(hi2c->Instance==I2C1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a23      	ldr	r2, [pc, #140]	@ (8001228 <HAL_I2C_MspInit+0xbc>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d13f      	bne.n	800121e <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800119e:	193b      	adds	r3, r7, r4
 80011a0:	2220      	movs	r2, #32
 80011a2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011a4:	193b      	adds	r3, r7, r4
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011aa:	193b      	adds	r3, r7, r4
 80011ac:	0018      	movs	r0, r3
 80011ae:	f001 ff31 	bl	8003014 <HAL_RCCEx_PeriphCLKConfig>
 80011b2:	1e03      	subs	r3, r0, #0
 80011b4:	d001      	beq.n	80011ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011b6:	f7ff ffaf 	bl	8001118 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <HAL_I2C_MspInit+0xc0>)
 80011bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011be:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <HAL_I2C_MspInit+0xc0>)
 80011c0:	2101      	movs	r1, #1
 80011c2:	430a      	orrs	r2, r1
 80011c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80011c6:	4b19      	ldr	r3, [pc, #100]	@ (800122c <HAL_I2C_MspInit+0xc0>)
 80011c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011ca:	2201      	movs	r2, #1
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011d2:	212c      	movs	r1, #44	@ 0x2c
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	22c0      	movs	r2, #192	@ 0xc0
 80011d8:	00d2      	lsls	r2, r2, #3
 80011da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	2212      	movs	r2, #18
 80011e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	187b      	adds	r3, r7, r1
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	2206      	movs	r2, #6
 80011f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	187a      	adds	r2, r7, r1
 80011f6:	23a0      	movs	r3, #160	@ 0xa0
 80011f8:	05db      	lsls	r3, r3, #23
 80011fa:	0011      	movs	r1, r2
 80011fc:	0018      	movs	r0, r3
 80011fe:	f000 f9f5 	bl	80015ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001202:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <HAL_I2C_MspInit+0xc0>)
 8001204:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001206:	4b09      	ldr	r3, [pc, #36]	@ (800122c <HAL_I2C_MspInit+0xc0>)
 8001208:	2180      	movs	r1, #128	@ 0x80
 800120a:	0389      	lsls	r1, r1, #14
 800120c:	430a      	orrs	r2, r1
 800120e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HAL_I2C_MspInit+0xc0>)
 8001212:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001214:	2380      	movs	r3, #128	@ 0x80
 8001216:	039b      	lsls	r3, r3, #14
 8001218:	4013      	ands	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800121e:	46c0      	nop			@ (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b011      	add	sp, #68	@ 0x44
 8001224:	bd90      	pop	{r4, r7, pc}
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	40005400 	.word	0x40005400
 800122c:	40021000 	.word	0x40021000

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001234:	46c0      	nop			@ (mov r8, r8)
 8001236:	e7fd      	b.n	8001234 <NMI_Handler+0x4>

08001238 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123c:	46c0      	nop			@ (mov r8, r8)
 800123e:	e7fd      	b.n	800123c <HardFault_Handler+0x4>

08001240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001244:	46c0      	nop			@ (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	46c0      	nop			@ (mov r8, r8)
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 f8d4 	bl	8001404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	46c0      	nop			@ (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800126c:	4a14      	ldr	r2, [pc, #80]	@ (80012c0 <_sbrk+0x5c>)
 800126e:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <_sbrk+0x60>)
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001278:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <_sbrk+0x64>)
 8001282:	4a12      	ldr	r2, [pc, #72]	@ (80012cc <_sbrk+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	18d3      	adds	r3, r2, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	429a      	cmp	r2, r3
 8001292:	d207      	bcs.n	80012a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001294:	f002 f80c 	bl	80032b0 <__errno>
 8001298:	0003      	movs	r3, r0
 800129a:	220c      	movs	r2, #12
 800129c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129e:	2301      	movs	r3, #1
 80012a0:	425b      	negs	r3, r3
 80012a2:	e009      	b.n	80012b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a4:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012aa:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	18d2      	adds	r2, r2, r3
 80012b2:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <_sbrk+0x64>)
 80012b4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	0018      	movs	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b006      	add	sp, #24
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20002000 	.word	0x20002000
 80012c4:	00000400 	.word	0x00000400
 80012c8:	20000100 	.word	0x20000100
 80012cc:	20000250 	.word	0x20000250

080012d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d4:	46c0      	nop			@ (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012dc:	480d      	ldr	r0, [pc, #52]	@ (8001314 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012e0:	f7ff fff6 	bl	80012d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e4:	480c      	ldr	r0, [pc, #48]	@ (8001318 <LoopForever+0x6>)
  ldr r1, =_edata
 80012e6:	490d      	ldr	r1, [pc, #52]	@ (800131c <LoopForever+0xa>)
  ldr r2, =_sidata
 80012e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001320 <LoopForever+0xe>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ec:	e002      	b.n	80012f4 <LoopCopyDataInit>

080012ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f2:	3304      	adds	r3, #4

080012f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f8:	d3f9      	bcc.n	80012ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001328 <LoopForever+0x16>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001300:	e001      	b.n	8001306 <LoopFillZerobss>

08001302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001304:	3204      	adds	r2, #4

08001306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001308:	d3fb      	bcc.n	8001302 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800130a:	f001 ffd7 	bl	80032bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800130e:	f7ff fc3f 	bl	8000b90 <main>

08001312 <LoopForever>:

LoopForever:
  b LoopForever
 8001312:	e7fe      	b.n	8001312 <LoopForever>
  ldr   r0, =_estack
 8001314:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800131c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001320:	08003cfc 	.word	0x08003cfc
  ldr r2, =_sbss
 8001324:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001328:	20000250 	.word	0x20000250

0800132c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC1_IRQHandler>
	...

08001330 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800133c:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <HAL_Init+0x3c>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <HAL_Init+0x3c>)
 8001342:	2180      	movs	r1, #128	@ 0x80
 8001344:	0049      	lsls	r1, r1, #1
 8001346:	430a      	orrs	r2, r1
 8001348:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800134a:	2003      	movs	r0, #3
 800134c:	f000 f810 	bl	8001370 <HAL_InitTick>
 8001350:	1e03      	subs	r3, r0, #0
 8001352:	d003      	beq.n	800135c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
 800135a:	e001      	b.n	8001360 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800135c:	f7ff fee2 	bl	8001124 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001360:	1dfb      	adds	r3, r7, #7
 8001362:	781b      	ldrb	r3, [r3, #0]
}
 8001364:	0018      	movs	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	b002      	add	sp, #8
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40022000 	.word	0x40022000

08001370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001378:	230f      	movs	r3, #15
 800137a:	18fb      	adds	r3, r7, r3
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001380:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <HAL_InitTick+0x88>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d02b      	beq.n	80013e0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001388:	4b1c      	ldr	r3, [pc, #112]	@ (80013fc <HAL_InitTick+0x8c>)
 800138a:	681c      	ldr	r4, [r3, #0]
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <HAL_InitTick+0x88>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	0019      	movs	r1, r3
 8001392:	23fa      	movs	r3, #250	@ 0xfa
 8001394:	0098      	lsls	r0, r3, #2
 8001396:	f7fe febd 	bl	8000114 <__udivsi3>
 800139a:	0003      	movs	r3, r0
 800139c:	0019      	movs	r1, r3
 800139e:	0020      	movs	r0, r4
 80013a0:	f7fe feb8 	bl	8000114 <__udivsi3>
 80013a4:	0003      	movs	r3, r0
 80013a6:	0018      	movs	r0, r3
 80013a8:	f000 f913 	bl	80015d2 <HAL_SYSTICK_Config>
 80013ac:	1e03      	subs	r3, r0, #0
 80013ae:	d112      	bne.n	80013d6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d80a      	bhi.n	80013cc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	2301      	movs	r3, #1
 80013ba:	425b      	negs	r3, r3
 80013bc:	2200      	movs	r2, #0
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 f8f2 	bl	80015a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <HAL_InitTick+0x90>)
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	e00d      	b.n	80013e8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80013cc:	230f      	movs	r3, #15
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
 80013d4:	e008      	b.n	80013e8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013d6:	230f      	movs	r3, #15
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
 80013de:	e003      	b.n	80013e8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013e0:	230f      	movs	r3, #15
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80013e8:	230f      	movs	r3, #15
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	781b      	ldrb	r3, [r3, #0]
}
 80013ee:	0018      	movs	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b005      	add	sp, #20
 80013f4:	bd90      	pop	{r4, r7, pc}
 80013f6:	46c0      	nop			@ (mov r8, r8)
 80013f8:	2000000c 	.word	0x2000000c
 80013fc:	20000004 	.word	0x20000004
 8001400:	20000008 	.word	0x20000008

08001404 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001408:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <HAL_IncTick+0x1c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	001a      	movs	r2, r3
 800140e:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <HAL_IncTick+0x20>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	18d2      	adds	r2, r2, r3
 8001414:	4b03      	ldr	r3, [pc, #12]	@ (8001424 <HAL_IncTick+0x20>)
 8001416:	601a      	str	r2, [r3, #0]
}
 8001418:	46c0      	nop			@ (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	46c0      	nop			@ (mov r8, r8)
 8001420:	2000000c 	.word	0x2000000c
 8001424:	20000104 	.word	0x20000104

08001428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  return uwTick;
 800142c:	4b02      	ldr	r3, [pc, #8]	@ (8001438 <HAL_GetTick+0x10>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	0018      	movs	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	20000104 	.word	0x20000104

0800143c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001444:	f7ff fff0 	bl	8001428 <HAL_GetTick>
 8001448:	0003      	movs	r3, r0
 800144a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	3301      	adds	r3, #1
 8001454:	d005      	beq.n	8001462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001456:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <HAL_Delay+0x44>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	001a      	movs	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	189b      	adds	r3, r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001462:	46c0      	nop			@ (mov r8, r8)
 8001464:	f7ff ffe0 	bl	8001428 <HAL_GetTick>
 8001468:	0002      	movs	r2, r0
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	429a      	cmp	r2, r3
 8001472:	d8f7      	bhi.n	8001464 <HAL_Delay+0x28>
  {
  }
}
 8001474:	46c0      	nop			@ (mov r8, r8)
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	b004      	add	sp, #16
 800147c:	bd80      	pop	{r7, pc}
 800147e:	46c0      	nop			@ (mov r8, r8)
 8001480:	2000000c 	.word	0x2000000c

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	0002      	movs	r2, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	1dfb      	adds	r3, r7, #7
 8001490:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001492:	1dfb      	adds	r3, r7, #7
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b7f      	cmp	r3, #127	@ 0x7f
 8001498:	d828      	bhi.n	80014ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800149a:	4a2f      	ldr	r2, [pc, #188]	@ (8001558 <__NVIC_SetPriority+0xd4>)
 800149c:	1dfb      	adds	r3, r7, #7
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	089b      	lsrs	r3, r3, #2
 80014a4:	33c0      	adds	r3, #192	@ 0xc0
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	589b      	ldr	r3, [r3, r2]
 80014aa:	1dfa      	adds	r2, r7, #7
 80014ac:	7812      	ldrb	r2, [r2, #0]
 80014ae:	0011      	movs	r1, r2
 80014b0:	2203      	movs	r2, #3
 80014b2:	400a      	ands	r2, r1
 80014b4:	00d2      	lsls	r2, r2, #3
 80014b6:	21ff      	movs	r1, #255	@ 0xff
 80014b8:	4091      	lsls	r1, r2
 80014ba:	000a      	movs	r2, r1
 80014bc:	43d2      	mvns	r2, r2
 80014be:	401a      	ands	r2, r3
 80014c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	019b      	lsls	r3, r3, #6
 80014c6:	22ff      	movs	r2, #255	@ 0xff
 80014c8:	401a      	ands	r2, r3
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	0018      	movs	r0, r3
 80014d0:	2303      	movs	r3, #3
 80014d2:	4003      	ands	r3, r0
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014d8:	481f      	ldr	r0, [pc, #124]	@ (8001558 <__NVIC_SetPriority+0xd4>)
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	089b      	lsrs	r3, r3, #2
 80014e2:	430a      	orrs	r2, r1
 80014e4:	33c0      	adds	r3, #192	@ 0xc0
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014ea:	e031      	b.n	8001550 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ec:	4a1b      	ldr	r2, [pc, #108]	@ (800155c <__NVIC_SetPriority+0xd8>)
 80014ee:	1dfb      	adds	r3, r7, #7
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	0019      	movs	r1, r3
 80014f4:	230f      	movs	r3, #15
 80014f6:	400b      	ands	r3, r1
 80014f8:	3b08      	subs	r3, #8
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3306      	adds	r3, #6
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	18d3      	adds	r3, r2, r3
 8001502:	3304      	adds	r3, #4
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	1dfa      	adds	r2, r7, #7
 8001508:	7812      	ldrb	r2, [r2, #0]
 800150a:	0011      	movs	r1, r2
 800150c:	2203      	movs	r2, #3
 800150e:	400a      	ands	r2, r1
 8001510:	00d2      	lsls	r2, r2, #3
 8001512:	21ff      	movs	r1, #255	@ 0xff
 8001514:	4091      	lsls	r1, r2
 8001516:	000a      	movs	r2, r1
 8001518:	43d2      	mvns	r2, r2
 800151a:	401a      	ands	r2, r3
 800151c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	019b      	lsls	r3, r3, #6
 8001522:	22ff      	movs	r2, #255	@ 0xff
 8001524:	401a      	ands	r2, r3
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	0018      	movs	r0, r3
 800152c:	2303      	movs	r3, #3
 800152e:	4003      	ands	r3, r0
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001534:	4809      	ldr	r0, [pc, #36]	@ (800155c <__NVIC_SetPriority+0xd8>)
 8001536:	1dfb      	adds	r3, r7, #7
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	001c      	movs	r4, r3
 800153c:	230f      	movs	r3, #15
 800153e:	4023      	ands	r3, r4
 8001540:	3b08      	subs	r3, #8
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	430a      	orrs	r2, r1
 8001546:	3306      	adds	r3, #6
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	18c3      	adds	r3, r0, r3
 800154c:	3304      	adds	r3, #4
 800154e:	601a      	str	r2, [r3, #0]
}
 8001550:	46c0      	nop			@ (mov r8, r8)
 8001552:	46bd      	mov	sp, r7
 8001554:	b003      	add	sp, #12
 8001556:	bd90      	pop	{r4, r7, pc}
 8001558:	e000e100 	.word	0xe000e100
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	1e5a      	subs	r2, r3, #1
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	045b      	lsls	r3, r3, #17
 8001570:	429a      	cmp	r2, r3
 8001572:	d301      	bcc.n	8001578 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001574:	2301      	movs	r3, #1
 8001576:	e010      	b.n	800159a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001578:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <SysTick_Config+0x44>)
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	3a01      	subs	r2, #1
 800157e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001580:	2301      	movs	r3, #1
 8001582:	425b      	negs	r3, r3
 8001584:	2103      	movs	r1, #3
 8001586:	0018      	movs	r0, r3
 8001588:	f7ff ff7c 	bl	8001484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <SysTick_Config+0x44>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <SysTick_Config+0x44>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b002      	add	sp, #8
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			@ (mov r8, r8)
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	210f      	movs	r1, #15
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	1c02      	adds	r2, r0, #0
 80015b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	0011      	movs	r1, r2
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7ff ff5d 	bl	8001484 <__NVIC_SetPriority>
}
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b004      	add	sp, #16
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff ffbf 	bl	8001560 <SysTick_Config>
 80015e2:	0003      	movs	r3, r0
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fa:	e147      	b.n	800188c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2101      	movs	r1, #1
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4091      	lsls	r1, r2
 8001606:	000a      	movs	r2, r1
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d100      	bne.n	8001614 <HAL_GPIO_Init+0x28>
 8001612:	e138      	b.n	8001886 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2203      	movs	r2, #3
 800161a:	4013      	ands	r3, r2
 800161c:	2b01      	cmp	r3, #1
 800161e:	d005      	beq.n	800162c <HAL_GPIO_Init+0x40>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2203      	movs	r2, #3
 8001626:	4013      	ands	r3, r2
 8001628:	2b02      	cmp	r3, #2
 800162a:	d130      	bne.n	800168e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2203      	movs	r2, #3
 8001638:	409a      	lsls	r2, r3
 800163a:	0013      	movs	r3, r2
 800163c:	43da      	mvns	r2, r3
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	409a      	lsls	r2, r3
 800164e:	0013      	movs	r3, r2
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001662:	2201      	movs	r2, #1
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	409a      	lsls	r2, r3
 8001668:	0013      	movs	r3, r2
 800166a:	43da      	mvns	r2, r3
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	091b      	lsrs	r3, r3, #4
 8001678:	2201      	movs	r2, #1
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
 8001680:	0013      	movs	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2203      	movs	r2, #3
 8001694:	4013      	ands	r3, r2
 8001696:	2b03      	cmp	r3, #3
 8001698:	d017      	beq.n	80016ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	2203      	movs	r2, #3
 80016a6:	409a      	lsls	r2, r3
 80016a8:	0013      	movs	r3, r2
 80016aa:	43da      	mvns	r2, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	409a      	lsls	r2, r3
 80016bc:	0013      	movs	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2203      	movs	r2, #3
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d123      	bne.n	800171e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	08da      	lsrs	r2, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3208      	adds	r2, #8
 80016de:	0092      	lsls	r2, r2, #2
 80016e0:	58d3      	ldr	r3, [r2, r3]
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2207      	movs	r2, #7
 80016e8:	4013      	ands	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	220f      	movs	r2, #15
 80016ee:	409a      	lsls	r2, r3
 80016f0:	0013      	movs	r3, r2
 80016f2:	43da      	mvns	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	691a      	ldr	r2, [r3, #16]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	2107      	movs	r1, #7
 8001702:	400b      	ands	r3, r1
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	409a      	lsls	r2, r3
 8001708:	0013      	movs	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	08da      	lsrs	r2, r3, #3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3208      	adds	r2, #8
 8001718:	0092      	lsls	r2, r2, #2
 800171a:	6939      	ldr	r1, [r7, #16]
 800171c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	2203      	movs	r2, #3
 800172a:	409a      	lsls	r2, r3
 800172c:	0013      	movs	r3, r2
 800172e:	43da      	mvns	r2, r3
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2203      	movs	r2, #3
 800173c:	401a      	ands	r2, r3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	409a      	lsls	r2, r3
 8001744:	0013      	movs	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	23c0      	movs	r3, #192	@ 0xc0
 8001758:	029b      	lsls	r3, r3, #10
 800175a:	4013      	ands	r3, r2
 800175c:	d100      	bne.n	8001760 <HAL_GPIO_Init+0x174>
 800175e:	e092      	b.n	8001886 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001760:	4a50      	ldr	r2, [pc, #320]	@ (80018a4 <HAL_GPIO_Init+0x2b8>)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3318      	adds	r3, #24
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	589b      	ldr	r3, [r3, r2]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2203      	movs	r2, #3
 8001772:	4013      	ands	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	220f      	movs	r2, #15
 8001778:	409a      	lsls	r2, r3
 800177a:	0013      	movs	r3, r2
 800177c:	43da      	mvns	r2, r3
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	23a0      	movs	r3, #160	@ 0xa0
 8001788:	05db      	lsls	r3, r3, #23
 800178a:	429a      	cmp	r2, r3
 800178c:	d013      	beq.n	80017b6 <HAL_GPIO_Init+0x1ca>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a45      	ldr	r2, [pc, #276]	@ (80018a8 <HAL_GPIO_Init+0x2bc>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d00d      	beq.n	80017b2 <HAL_GPIO_Init+0x1c6>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a44      	ldr	r2, [pc, #272]	@ (80018ac <HAL_GPIO_Init+0x2c0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d007      	beq.n	80017ae <HAL_GPIO_Init+0x1c2>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a43      	ldr	r2, [pc, #268]	@ (80018b0 <HAL_GPIO_Init+0x2c4>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d101      	bne.n	80017aa <HAL_GPIO_Init+0x1be>
 80017a6:	2303      	movs	r3, #3
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x1cc>
 80017aa:	2305      	movs	r3, #5
 80017ac:	e004      	b.n	80017b8 <HAL_GPIO_Init+0x1cc>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_Init+0x1cc>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_GPIO_Init+0x1cc>
 80017b6:	2300      	movs	r3, #0
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	2103      	movs	r1, #3
 80017bc:	400a      	ands	r2, r1
 80017be:	00d2      	lsls	r2, r2, #3
 80017c0:	4093      	lsls	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80017c8:	4936      	ldr	r1, [pc, #216]	@ (80018a4 <HAL_GPIO_Init+0x2b8>)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3318      	adds	r3, #24
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017d6:	4b33      	ldr	r3, [pc, #204]	@ (80018a4 <HAL_GPIO_Init+0x2b8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	43da      	mvns	r2, r3
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	2380      	movs	r3, #128	@ 0x80
 80017ec:	035b      	lsls	r3, r3, #13
 80017ee:	4013      	ands	r3, r2
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017fa:	4b2a      	ldr	r3, [pc, #168]	@ (80018a4 <HAL_GPIO_Init+0x2b8>)
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001800:	4b28      	ldr	r3, [pc, #160]	@ (80018a4 <HAL_GPIO_Init+0x2b8>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	43da      	mvns	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	2380      	movs	r3, #128	@ 0x80
 8001816:	039b      	lsls	r3, r3, #14
 8001818:	4013      	ands	r3, r2
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001824:	4b1f      	ldr	r3, [pc, #124]	@ (80018a4 <HAL_GPIO_Init+0x2b8>)
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800182a:	4a1e      	ldr	r2, [pc, #120]	@ (80018a4 <HAL_GPIO_Init+0x2b8>)
 800182c:	2384      	movs	r3, #132	@ 0x84
 800182e:	58d3      	ldr	r3, [r2, r3]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	43da      	mvns	r2, r3
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	2380      	movs	r3, #128	@ 0x80
 8001842:	029b      	lsls	r3, r3, #10
 8001844:	4013      	ands	r3, r2
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001850:	4914      	ldr	r1, [pc, #80]	@ (80018a4 <HAL_GPIO_Init+0x2b8>)
 8001852:	2284      	movs	r2, #132	@ 0x84
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001858:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <HAL_GPIO_Init+0x2b8>)
 800185a:	2380      	movs	r3, #128	@ 0x80
 800185c:	58d3      	ldr	r3, [r2, r3]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43da      	mvns	r2, r3
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	2380      	movs	r3, #128	@ 0x80
 8001870:	025b      	lsls	r3, r3, #9
 8001872:	4013      	ands	r3, r2
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800187e:	4909      	ldr	r1, [pc, #36]	@ (80018a4 <HAL_GPIO_Init+0x2b8>)
 8001880:	2280      	movs	r2, #128	@ 0x80
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3301      	adds	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	40da      	lsrs	r2, r3
 8001894:	1e13      	subs	r3, r2, #0
 8001896:	d000      	beq.n	800189a <HAL_GPIO_Init+0x2ae>
 8001898:	e6b0      	b.n	80015fc <HAL_GPIO_Init+0x10>
  }
}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	46c0      	nop			@ (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b006      	add	sp, #24
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40021800 	.word	0x40021800
 80018a8:	50000400 	.word	0x50000400
 80018ac:	50000800 	.word	0x50000800
 80018b0:	50000c00 	.word	0x50000c00

080018b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	000a      	movs	r2, r1
 80018be:	1cbb      	adds	r3, r7, #2
 80018c0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	1cba      	adds	r2, r7, #2
 80018c8:	8812      	ldrh	r2, [r2, #0]
 80018ca:	4013      	ands	r3, r2
 80018cc:	d004      	beq.n	80018d8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80018ce:	230f      	movs	r3, #15
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e003      	b.n	80018e0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018d8:	230f      	movs	r3, #15
 80018da:	18fb      	adds	r3, r7, r3
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80018e0:	230f      	movs	r3, #15
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	781b      	ldrb	r3, [r3, #0]
}
 80018e6:	0018      	movs	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b004      	add	sp, #16
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	0008      	movs	r0, r1
 80018f8:	0011      	movs	r1, r2
 80018fa:	1cbb      	adds	r3, r7, #2
 80018fc:	1c02      	adds	r2, r0, #0
 80018fe:	801a      	strh	r2, [r3, #0]
 8001900:	1c7b      	adds	r3, r7, #1
 8001902:	1c0a      	adds	r2, r1, #0
 8001904:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001906:	1c7b      	adds	r3, r7, #1
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d004      	beq.n	8001918 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800190e:	1cbb      	adds	r3, r7, #2
 8001910:	881a      	ldrh	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001916:	e003      	b.n	8001920 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001918:	1cbb      	adds	r3, r7, #2
 800191a:	881a      	ldrh	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001920:	46c0      	nop			@ (mov r8, r8)
 8001922:	46bd      	mov	sp, r7
 8001924:	b002      	add	sp, #8
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e08f      	b.n	8001a5a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2241      	movs	r2, #65	@ 0x41
 800193e:	5c9b      	ldrb	r3, [r3, r2]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d107      	bne.n	8001956 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2240      	movs	r2, #64	@ 0x40
 800194a:	2100      	movs	r1, #0
 800194c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff fc0b 	bl	800116c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2241      	movs	r2, #65	@ 0x41
 800195a:	2124      	movs	r1, #36	@ 0x24
 800195c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2101      	movs	r1, #1
 800196a:	438a      	bics	r2, r1
 800196c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	493b      	ldr	r1, [pc, #236]	@ (8001a64 <HAL_I2C_Init+0x13c>)
 8001978:	400a      	ands	r2, r1
 800197a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4938      	ldr	r1, [pc, #224]	@ (8001a68 <HAL_I2C_Init+0x140>)
 8001988:	400a      	ands	r2, r1
 800198a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d108      	bne.n	80019a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2180      	movs	r1, #128	@ 0x80
 800199e:	0209      	lsls	r1, r1, #8
 80019a0:	430a      	orrs	r2, r1
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	e007      	b.n	80019b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2184      	movs	r1, #132	@ 0x84
 80019b0:	0209      	lsls	r1, r1, #8
 80019b2:	430a      	orrs	r2, r1
 80019b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d109      	bne.n	80019d2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2180      	movs	r1, #128	@ 0x80
 80019ca:	0109      	lsls	r1, r1, #4
 80019cc:	430a      	orrs	r2, r1
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	e007      	b.n	80019e2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4923      	ldr	r1, [pc, #140]	@ (8001a6c <HAL_I2C_Init+0x144>)
 80019de:	400a      	ands	r2, r1
 80019e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4920      	ldr	r1, [pc, #128]	@ (8001a70 <HAL_I2C_Init+0x148>)
 80019ee:	430a      	orrs	r2, r1
 80019f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	491a      	ldr	r1, [pc, #104]	@ (8001a68 <HAL_I2C_Init+0x140>)
 80019fe:	400a      	ands	r2, r1
 8001a00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69d9      	ldr	r1, [r3, #28]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1a      	ldr	r2, [r3, #32]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2101      	movs	r1, #1
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2241      	movs	r2, #65	@ 0x41
 8001a46:	2120      	movs	r1, #32
 8001a48:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2242      	movs	r2, #66	@ 0x42
 8001a54:	2100      	movs	r1, #0
 8001a56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	f0ffffff 	.word	0xf0ffffff
 8001a68:	ffff7fff 	.word	0xffff7fff
 8001a6c:	fffff7ff 	.word	0xfffff7ff
 8001a70:	02008000 	.word	0x02008000

08001a74 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b089      	sub	sp, #36	@ 0x24
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	000c      	movs	r4, r1
 8001a7e:	0010      	movs	r0, r2
 8001a80:	0019      	movs	r1, r3
 8001a82:	230a      	movs	r3, #10
 8001a84:	18fb      	adds	r3, r7, r3
 8001a86:	1c22      	adds	r2, r4, #0
 8001a88:	801a      	strh	r2, [r3, #0]
 8001a8a:	2308      	movs	r3, #8
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	1c02      	adds	r2, r0, #0
 8001a90:	801a      	strh	r2, [r3, #0]
 8001a92:	1dbb      	adds	r3, r7, #6
 8001a94:	1c0a      	adds	r2, r1, #0
 8001a96:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2241      	movs	r2, #65	@ 0x41
 8001a9c:	5c9b      	ldrb	r3, [r3, r2]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	d000      	beq.n	8001aa6 <HAL_I2C_Mem_Write+0x32>
 8001aa4:	e10c      	b.n	8001cc0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <HAL_I2C_Mem_Write+0x42>
 8001aac:	232c      	movs	r3, #44	@ 0x2c
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d105      	bne.n	8001ac2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2280      	movs	r2, #128	@ 0x80
 8001aba:	0092      	lsls	r2, r2, #2
 8001abc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0ff      	b.n	8001cc2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2240      	movs	r2, #64	@ 0x40
 8001ac6:	5c9b      	ldrb	r3, [r3, r2]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_I2C_Mem_Write+0x5c>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e0f8      	b.n	8001cc2 <HAL_I2C_Mem_Write+0x24e>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2240      	movs	r2, #64	@ 0x40
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ad8:	f7ff fca6 	bl	8001428 <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	0219      	lsls	r1, r3, #8
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2319      	movs	r3, #25
 8001aec:	2201      	movs	r2, #1
 8001aee:	f000 fb0b 	bl	8002108 <I2C_WaitOnFlagUntilTimeout>
 8001af2:	1e03      	subs	r3, r0, #0
 8001af4:	d001      	beq.n	8001afa <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e0e3      	b.n	8001cc2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2241      	movs	r2, #65	@ 0x41
 8001afe:	2121      	movs	r1, #33	@ 0x21
 8001b00:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2242      	movs	r2, #66	@ 0x42
 8001b06:	2140      	movs	r1, #64	@ 0x40
 8001b08:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	222c      	movs	r2, #44	@ 0x2c
 8001b1a:	18ba      	adds	r2, r7, r2
 8001b1c:	8812      	ldrh	r2, [r2, #0]
 8001b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b26:	1dbb      	adds	r3, r7, #6
 8001b28:	881c      	ldrh	r4, [r3, #0]
 8001b2a:	2308      	movs	r3, #8
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	881a      	ldrh	r2, [r3, #0]
 8001b30:	230a      	movs	r3, #10
 8001b32:	18fb      	adds	r3, r7, r3
 8001b34:	8819      	ldrh	r1, [r3, #0]
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	9301      	str	r3, [sp, #4]
 8001b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	0023      	movs	r3, r4
 8001b42:	f000 f9f9 	bl	8001f38 <I2C_RequestMemoryWrite>
 8001b46:	1e03      	subs	r3, r0, #0
 8001b48:	d005      	beq.n	8001b56 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2240      	movs	r2, #64	@ 0x40
 8001b4e:	2100      	movs	r1, #0
 8001b50:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e0b5      	b.n	8001cc2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2bff      	cmp	r3, #255	@ 0xff
 8001b5e:	d911      	bls.n	8001b84 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	22ff      	movs	r2, #255	@ 0xff
 8001b64:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	2380      	movs	r3, #128	@ 0x80
 8001b6e:	045c      	lsls	r4, r3, #17
 8001b70:	230a      	movs	r3, #10
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	8819      	ldrh	r1, [r3, #0]
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	0023      	movs	r3, r4
 8001b7e:	f000 fc9d 	bl	80024bc <I2C_TransferConfig>
 8001b82:	e012      	b.n	8001baa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	049c      	lsls	r4, r3, #18
 8001b98:	230a      	movs	r3, #10
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	8819      	ldrh	r1, [r3, #0]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	0023      	movs	r3, r4
 8001ba6:	f000 fc89 	bl	80024bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f000 fb01 	bl	80021b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bb6:	1e03      	subs	r3, r0, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e081      	b.n	8001cc2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	781a      	ldrb	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d03a      	beq.n	8001c6e <HAL_I2C_Mem_Write+0x1fa>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d136      	bne.n	8001c6e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	0013      	movs	r3, r2
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2180      	movs	r1, #128	@ 0x80
 8001c0e:	f000 fa7b 	bl	8002108 <I2C_WaitOnFlagUntilTimeout>
 8001c12:	1e03      	subs	r3, r0, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e053      	b.n	8001cc2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	2bff      	cmp	r3, #255	@ 0xff
 8001c22:	d911      	bls.n	8001c48 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	22ff      	movs	r2, #255	@ 0xff
 8001c28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	2380      	movs	r3, #128	@ 0x80
 8001c32:	045c      	lsls	r4, r3, #17
 8001c34:	230a      	movs	r3, #10
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	8819      	ldrh	r1, [r3, #0]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	0023      	movs	r3, r4
 8001c42:	f000 fc3b 	bl	80024bc <I2C_TransferConfig>
 8001c46:	e012      	b.n	8001c6e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	2380      	movs	r3, #128	@ 0x80
 8001c5a:	049c      	lsls	r4, r3, #18
 8001c5c:	230a      	movs	r3, #10
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	8819      	ldrh	r1, [r3, #0]
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	2300      	movs	r3, #0
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	0023      	movs	r3, r4
 8001c6a:	f000 fc27 	bl	80024bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d198      	bne.n	8001baa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f000 fae0 	bl	8002244 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c84:	1e03      	subs	r3, r0, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e01a      	b.n	8001cc2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2220      	movs	r2, #32
 8001c92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	490b      	ldr	r1, [pc, #44]	@ (8001ccc <HAL_I2C_Mem_Write+0x258>)
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2241      	movs	r2, #65	@ 0x41
 8001ca8:	2120      	movs	r1, #32
 8001caa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2242      	movs	r2, #66	@ 0x42
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2240      	movs	r2, #64	@ 0x40
 8001cb8:	2100      	movs	r1, #0
 8001cba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e000      	b.n	8001cc2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001cc0:	2302      	movs	r3, #2
  }
}
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b007      	add	sp, #28
 8001cc8:	bd90      	pop	{r4, r7, pc}
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	fe00e800 	.word	0xfe00e800

08001cd0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b089      	sub	sp, #36	@ 0x24
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	000c      	movs	r4, r1
 8001cda:	0010      	movs	r0, r2
 8001cdc:	0019      	movs	r1, r3
 8001cde:	230a      	movs	r3, #10
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	1c22      	adds	r2, r4, #0
 8001ce4:	801a      	strh	r2, [r3, #0]
 8001ce6:	2308      	movs	r3, #8
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	1c02      	adds	r2, r0, #0
 8001cec:	801a      	strh	r2, [r3, #0]
 8001cee:	1dbb      	adds	r3, r7, #6
 8001cf0:	1c0a      	adds	r2, r1, #0
 8001cf2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2241      	movs	r2, #65	@ 0x41
 8001cf8:	5c9b      	ldrb	r3, [r3, r2]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d000      	beq.n	8001d02 <HAL_I2C_Mem_Read+0x32>
 8001d00:	e110      	b.n	8001f24 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d004      	beq.n	8001d12 <HAL_I2C_Mem_Read+0x42>
 8001d08:	232c      	movs	r3, #44	@ 0x2c
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d105      	bne.n	8001d1e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2280      	movs	r2, #128	@ 0x80
 8001d16:	0092      	lsls	r2, r2, #2
 8001d18:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e103      	b.n	8001f26 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2240      	movs	r2, #64	@ 0x40
 8001d22:	5c9b      	ldrb	r3, [r3, r2]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_I2C_Mem_Read+0x5c>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e0fc      	b.n	8001f26 <HAL_I2C_Mem_Read+0x256>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2240      	movs	r2, #64	@ 0x40
 8001d30:	2101      	movs	r1, #1
 8001d32:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d34:	f7ff fb78 	bl	8001428 <HAL_GetTick>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d3c:	2380      	movs	r3, #128	@ 0x80
 8001d3e:	0219      	lsls	r1, r3, #8
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2319      	movs	r3, #25
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f000 f9dd 	bl	8002108 <I2C_WaitOnFlagUntilTimeout>
 8001d4e:	1e03      	subs	r3, r0, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0e7      	b.n	8001f26 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2241      	movs	r2, #65	@ 0x41
 8001d5a:	2122      	movs	r1, #34	@ 0x22
 8001d5c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2242      	movs	r2, #66	@ 0x42
 8001d62:	2140      	movs	r1, #64	@ 0x40
 8001d64:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	222c      	movs	r2, #44	@ 0x2c
 8001d76:	18ba      	adds	r2, r7, r2
 8001d78:	8812      	ldrh	r2, [r2, #0]
 8001d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d82:	1dbb      	adds	r3, r7, #6
 8001d84:	881c      	ldrh	r4, [r3, #0]
 8001d86:	2308      	movs	r3, #8
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	881a      	ldrh	r2, [r3, #0]
 8001d8c:	230a      	movs	r3, #10
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	8819      	ldrh	r1, [r3, #0]
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	0023      	movs	r3, r4
 8001d9e:	f000 f92f 	bl	8002000 <I2C_RequestMemoryRead>
 8001da2:	1e03      	subs	r3, r0, #0
 8001da4:	d005      	beq.n	8001db2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2240      	movs	r2, #64	@ 0x40
 8001daa:	2100      	movs	r1, #0
 8001dac:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e0b9      	b.n	8001f26 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	2bff      	cmp	r3, #255	@ 0xff
 8001dba:	d911      	bls.n	8001de0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	22ff      	movs	r2, #255	@ 0xff
 8001dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	2380      	movs	r3, #128	@ 0x80
 8001dca:	045c      	lsls	r4, r3, #17
 8001dcc:	230a      	movs	r3, #10
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	8819      	ldrh	r1, [r3, #0]
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	4b56      	ldr	r3, [pc, #344]	@ (8001f30 <HAL_I2C_Mem_Read+0x260>)
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	0023      	movs	r3, r4
 8001dda:	f000 fb6f 	bl	80024bc <I2C_TransferConfig>
 8001dde:	e012      	b.n	8001e06 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	2380      	movs	r3, #128	@ 0x80
 8001df2:	049c      	lsls	r4, r3, #18
 8001df4:	230a      	movs	r3, #10
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	8819      	ldrh	r1, [r3, #0]
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	4b4c      	ldr	r3, [pc, #304]	@ (8001f30 <HAL_I2C_Mem_Read+0x260>)
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	0023      	movs	r3, r4
 8001e02:	f000 fb5b 	bl	80024bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	0013      	movs	r3, r2
 8001e10:	2200      	movs	r2, #0
 8001e12:	2104      	movs	r1, #4
 8001e14:	f000 f978 	bl	8002108 <I2C_WaitOnFlagUntilTimeout>
 8001e18:	1e03      	subs	r3, r0, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e082      	b.n	8001f26 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d03a      	beq.n	8001ed2 <HAL_I2C_Mem_Read+0x202>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d136      	bne.n	8001ed2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	0013      	movs	r3, r2
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2180      	movs	r1, #128	@ 0x80
 8001e72:	f000 f949 	bl	8002108 <I2C_WaitOnFlagUntilTimeout>
 8001e76:	1e03      	subs	r3, r0, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e053      	b.n	8001f26 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	2bff      	cmp	r3, #255	@ 0xff
 8001e86:	d911      	bls.n	8001eac <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	22ff      	movs	r2, #255	@ 0xff
 8001e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	2380      	movs	r3, #128	@ 0x80
 8001e96:	045c      	lsls	r4, r3, #17
 8001e98:	230a      	movs	r3, #10
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	8819      	ldrh	r1, [r3, #0]
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	0023      	movs	r3, r4
 8001ea6:	f000 fb09 	bl	80024bc <I2C_TransferConfig>
 8001eaa:	e012      	b.n	8001ed2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	2380      	movs	r3, #128	@ 0x80
 8001ebe:	049c      	lsls	r4, r3, #18
 8001ec0:	230a      	movs	r3, #10
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	8819      	ldrh	r1, [r3, #0]
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	0023      	movs	r3, r4
 8001ece:	f000 faf5 	bl	80024bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d194      	bne.n	8001e06 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 f9ae 	bl	8002244 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ee8:	1e03      	subs	r3, r0, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e01a      	b.n	8001f26 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	490c      	ldr	r1, [pc, #48]	@ (8001f34 <HAL_I2C_Mem_Read+0x264>)
 8001f04:	400a      	ands	r2, r1
 8001f06:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2241      	movs	r2, #65	@ 0x41
 8001f0c:	2120      	movs	r1, #32
 8001f0e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2242      	movs	r2, #66	@ 0x42
 8001f14:	2100      	movs	r1, #0
 8001f16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2240      	movs	r2, #64	@ 0x40
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e000      	b.n	8001f26 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001f24:	2302      	movs	r3, #2
  }
}
 8001f26:	0018      	movs	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b007      	add	sp, #28
 8001f2c:	bd90      	pop	{r4, r7, pc}
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	80002400 	.word	0x80002400
 8001f34:	fe00e800 	.word	0xfe00e800

08001f38 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001f38:	b5b0      	push	{r4, r5, r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	000c      	movs	r4, r1
 8001f42:	0010      	movs	r0, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	250a      	movs	r5, #10
 8001f48:	197b      	adds	r3, r7, r5
 8001f4a:	1c22      	adds	r2, r4, #0
 8001f4c:	801a      	strh	r2, [r3, #0]
 8001f4e:	2308      	movs	r3, #8
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	1c02      	adds	r2, r0, #0
 8001f54:	801a      	strh	r2, [r3, #0]
 8001f56:	1dbb      	adds	r3, r7, #6
 8001f58:	1c0a      	adds	r2, r1, #0
 8001f5a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f5c:	1dbb      	adds	r3, r7, #6
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	2380      	movs	r3, #128	@ 0x80
 8001f64:	045c      	lsls	r4, r3, #17
 8001f66:	197b      	adds	r3, r7, r5
 8001f68:	8819      	ldrh	r1, [r3, #0]
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	4b23      	ldr	r3, [pc, #140]	@ (8001ffc <I2C_RequestMemoryWrite+0xc4>)
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	0023      	movs	r3, r4
 8001f72:	f000 faa3 	bl	80024bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f78:	6a39      	ldr	r1, [r7, #32]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f000 f91b 	bl	80021b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f82:	1e03      	subs	r3, r0, #0
 8001f84:	d001      	beq.n	8001f8a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e033      	b.n	8001ff2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f8a:	1dbb      	adds	r3, r7, #6
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d107      	bne.n	8001fa2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f92:	2308      	movs	r3, #8
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fa0:	e019      	b.n	8001fd6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fa2:	2308      	movs	r3, #8
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb6:	6a39      	ldr	r1, [r7, #32]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f000 f8fc 	bl	80021b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fc0:	1e03      	subs	r3, r0, #0
 8001fc2:	d001      	beq.n	8001fc8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e014      	b.n	8001ff2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fc8:	2308      	movs	r3, #8
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd6:	6a3a      	ldr	r2, [r7, #32]
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	0013      	movs	r3, r2
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2180      	movs	r1, #128	@ 0x80
 8001fe4:	f000 f890 	bl	8002108 <I2C_WaitOnFlagUntilTimeout>
 8001fe8:	1e03      	subs	r3, r0, #0
 8001fea:	d001      	beq.n	8001ff0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b004      	add	sp, #16
 8001ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8001ffa:	46c0      	nop			@ (mov r8, r8)
 8001ffc:	80002000 	.word	0x80002000

08002000 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002000:	b5b0      	push	{r4, r5, r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af02      	add	r7, sp, #8
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	000c      	movs	r4, r1
 800200a:	0010      	movs	r0, r2
 800200c:	0019      	movs	r1, r3
 800200e:	250a      	movs	r5, #10
 8002010:	197b      	adds	r3, r7, r5
 8002012:	1c22      	adds	r2, r4, #0
 8002014:	801a      	strh	r2, [r3, #0]
 8002016:	2308      	movs	r3, #8
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	1c02      	adds	r2, r0, #0
 800201c:	801a      	strh	r2, [r3, #0]
 800201e:	1dbb      	adds	r3, r7, #6
 8002020:	1c0a      	adds	r2, r1, #0
 8002022:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002024:	1dbb      	adds	r3, r7, #6
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	197b      	adds	r3, r7, r5
 800202c:	8819      	ldrh	r1, [r3, #0]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	4b23      	ldr	r3, [pc, #140]	@ (80020c0 <I2C_RequestMemoryRead+0xc0>)
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2300      	movs	r3, #0
 8002036:	f000 fa41 	bl	80024bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800203a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800203c:	6a39      	ldr	r1, [r7, #32]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	0018      	movs	r0, r3
 8002042:	f000 f8b9 	bl	80021b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002046:	1e03      	subs	r3, r0, #0
 8002048:	d001      	beq.n	800204e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e033      	b.n	80020b6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800204e:	1dbb      	adds	r3, r7, #6
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d107      	bne.n	8002066 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002056:	2308      	movs	r3, #8
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	629a      	str	r2, [r3, #40]	@ 0x28
 8002064:	e019      	b.n	800209a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002066:	2308      	movs	r3, #8
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	b29b      	uxth	r3, r3
 8002070:	b2da      	uxtb	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800207a:	6a39      	ldr	r1, [r7, #32]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	0018      	movs	r0, r3
 8002080:	f000 f89a 	bl	80021b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002084:	1e03      	subs	r3, r0, #0
 8002086:	d001      	beq.n	800208c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e014      	b.n	80020b6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800208c:	2308      	movs	r3, #8
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800209a:	6a3a      	ldr	r2, [r7, #32]
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	0013      	movs	r3, r2
 80020a4:	2200      	movs	r2, #0
 80020a6:	2140      	movs	r1, #64	@ 0x40
 80020a8:	f000 f82e 	bl	8002108 <I2C_WaitOnFlagUntilTimeout>
 80020ac:	1e03      	subs	r3, r0, #0
 80020ae:	d001      	beq.n	80020b4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	0018      	movs	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b004      	add	sp, #16
 80020bc:	bdb0      	pop	{r4, r5, r7, pc}
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	80002000 	.word	0x80002000

080020c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2202      	movs	r2, #2
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d103      	bne.n	80020e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2200      	movs	r2, #0
 80020e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	2201      	movs	r2, #1
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d007      	beq.n	8002100 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699a      	ldr	r2, [r3, #24]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2101      	movs	r1, #1
 80020fc:	430a      	orrs	r2, r1
 80020fe:	619a      	str	r2, [r3, #24]
  }
}
 8002100:	46c0      	nop			@ (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}

08002108 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	1dfb      	adds	r3, r7, #7
 8002116:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002118:	e03a      	b.n	8002190 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	6839      	ldr	r1, [r7, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	0018      	movs	r0, r3
 8002122:	f000 f8d3 	bl	80022cc <I2C_IsErrorOccurred>
 8002126:	1e03      	subs	r3, r0, #0
 8002128:	d001      	beq.n	800212e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e040      	b.n	80021b0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	3301      	adds	r3, #1
 8002132:	d02d      	beq.n	8002190 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002134:	f7ff f978 	bl	8001428 <HAL_GetTick>
 8002138:	0002      	movs	r2, r0
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d302      	bcc.n	800214a <I2C_WaitOnFlagUntilTimeout+0x42>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d122      	bne.n	8002190 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	4013      	ands	r3, r2
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	425a      	negs	r2, r3
 800215a:	4153      	adcs	r3, r2
 800215c:	b2db      	uxtb	r3, r3
 800215e:	001a      	movs	r2, r3
 8002160:	1dfb      	adds	r3, r7, #7
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d113      	bne.n	8002190 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216c:	2220      	movs	r2, #32
 800216e:	431a      	orrs	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2241      	movs	r2, #65	@ 0x41
 8002178:	2120      	movs	r1, #32
 800217a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2242      	movs	r2, #66	@ 0x42
 8002180:	2100      	movs	r1, #0
 8002182:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2240      	movs	r2, #64	@ 0x40
 8002188:	2100      	movs	r1, #0
 800218a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e00f      	b.n	80021b0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	4013      	ands	r3, r2
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	425a      	negs	r2, r3
 80021a0:	4153      	adcs	r3, r2
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	001a      	movs	r2, r3
 80021a6:	1dfb      	adds	r3, r7, #7
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d0b5      	beq.n	800211a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b004      	add	sp, #16
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021c4:	e032      	b.n	800222c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f000 f87d 	bl	80022cc <I2C_IsErrorOccurred>
 80021d2:	1e03      	subs	r3, r0, #0
 80021d4:	d001      	beq.n	80021da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e030      	b.n	800223c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	3301      	adds	r3, #1
 80021de:	d025      	beq.n	800222c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e0:	f7ff f922 	bl	8001428 <HAL_GetTick>
 80021e4:	0002      	movs	r2, r0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d302      	bcc.n	80021f6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d11a      	bne.n	800222c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2202      	movs	r2, #2
 80021fe:	4013      	ands	r3, r2
 8002200:	2b02      	cmp	r3, #2
 8002202:	d013      	beq.n	800222c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002208:	2220      	movs	r2, #32
 800220a:	431a      	orrs	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2241      	movs	r2, #65	@ 0x41
 8002214:	2120      	movs	r1, #32
 8002216:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2242      	movs	r2, #66	@ 0x42
 800221c:	2100      	movs	r1, #0
 800221e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2240      	movs	r2, #64	@ 0x40
 8002224:	2100      	movs	r1, #0
 8002226:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e007      	b.n	800223c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2202      	movs	r2, #2
 8002234:	4013      	ands	r3, r2
 8002236:	2b02      	cmp	r3, #2
 8002238:	d1c5      	bne.n	80021c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	0018      	movs	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	b004      	add	sp, #16
 8002242:	bd80      	pop	{r7, pc}

08002244 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002250:	e02f      	b.n	80022b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	0018      	movs	r0, r3
 800225a:	f000 f837 	bl	80022cc <I2C_IsErrorOccurred>
 800225e:	1e03      	subs	r3, r0, #0
 8002260:	d001      	beq.n	8002266 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e02d      	b.n	80022c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002266:	f7ff f8df 	bl	8001428 <HAL_GetTick>
 800226a:	0002      	movs	r2, r0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	429a      	cmp	r2, r3
 8002274:	d302      	bcc.n	800227c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d11a      	bne.n	80022b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2220      	movs	r2, #32
 8002284:	4013      	ands	r3, r2
 8002286:	2b20      	cmp	r3, #32
 8002288:	d013      	beq.n	80022b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228e:	2220      	movs	r2, #32
 8002290:	431a      	orrs	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2241      	movs	r2, #65	@ 0x41
 800229a:	2120      	movs	r1, #32
 800229c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2242      	movs	r2, #66	@ 0x42
 80022a2:	2100      	movs	r1, #0
 80022a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2240      	movs	r2, #64	@ 0x40
 80022aa:	2100      	movs	r1, #0
 80022ac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e007      	b.n	80022c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	2220      	movs	r2, #32
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b20      	cmp	r3, #32
 80022be:	d1c8      	bne.n	8002252 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	0018      	movs	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b004      	add	sp, #16
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	@ 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d8:	2327      	movs	r3, #39	@ 0x27
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	2210      	movs	r2, #16
 80022f4:	4013      	ands	r3, r2
 80022f6:	d100      	bne.n	80022fa <I2C_IsErrorOccurred+0x2e>
 80022f8:	e079      	b.n	80023ee <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2210      	movs	r2, #16
 8002300:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002302:	e057      	b.n	80023b4 <I2C_IsErrorOccurred+0xe8>
 8002304:	2227      	movs	r2, #39	@ 0x27
 8002306:	18bb      	adds	r3, r7, r2
 8002308:	18ba      	adds	r2, r7, r2
 800230a:	7812      	ldrb	r2, [r2, #0]
 800230c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	3301      	adds	r3, #1
 8002312:	d04f      	beq.n	80023b4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002314:	f7ff f888 	bl	8001428 <HAL_GetTick>
 8002318:	0002      	movs	r2, r0
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	429a      	cmp	r2, r3
 8002322:	d302      	bcc.n	800232a <I2C_IsErrorOccurred+0x5e>
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d144      	bne.n	80023b4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	2380      	movs	r3, #128	@ 0x80
 8002332:	01db      	lsls	r3, r3, #7
 8002334:	4013      	ands	r3, r2
 8002336:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002338:	2013      	movs	r0, #19
 800233a:	183b      	adds	r3, r7, r0
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	2142      	movs	r1, #66	@ 0x42
 8002340:	5c52      	ldrb	r2, [r2, r1]
 8002342:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	2380      	movs	r3, #128	@ 0x80
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	401a      	ands	r2, r3
 8002350:	2380      	movs	r3, #128	@ 0x80
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	429a      	cmp	r2, r3
 8002356:	d126      	bne.n	80023a6 <I2C_IsErrorOccurred+0xda>
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	2380      	movs	r3, #128	@ 0x80
 800235c:	01db      	lsls	r3, r3, #7
 800235e:	429a      	cmp	r2, r3
 8002360:	d021      	beq.n	80023a6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002362:	183b      	adds	r3, r7, r0
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b20      	cmp	r3, #32
 8002368:	d01d      	beq.n	80023a6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2180      	movs	r1, #128	@ 0x80
 8002376:	01c9      	lsls	r1, r1, #7
 8002378:	430a      	orrs	r2, r1
 800237a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800237c:	f7ff f854 	bl	8001428 <HAL_GetTick>
 8002380:	0003      	movs	r3, r0
 8002382:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002384:	e00f      	b.n	80023a6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002386:	f7ff f84f 	bl	8001428 <HAL_GetTick>
 800238a:	0002      	movs	r2, r0
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b19      	cmp	r3, #25
 8002392:	d908      	bls.n	80023a6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	2220      	movs	r2, #32
 8002398:	4313      	orrs	r3, r2
 800239a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800239c:	2327      	movs	r3, #39	@ 0x27
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	2201      	movs	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]

              break;
 80023a4:	e006      	b.n	80023b4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2220      	movs	r2, #32
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	d1e8      	bne.n	8002386 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2220      	movs	r2, #32
 80023bc:	4013      	ands	r3, r2
 80023be:	2b20      	cmp	r3, #32
 80023c0:	d004      	beq.n	80023cc <I2C_IsErrorOccurred+0x100>
 80023c2:	2327      	movs	r3, #39	@ 0x27
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d09b      	beq.n	8002304 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80023cc:	2327      	movs	r3, #39	@ 0x27
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d103      	bne.n	80023de <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2220      	movs	r2, #32
 80023dc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	2204      	movs	r2, #4
 80023e2:	4313      	orrs	r3, r2
 80023e4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80023e6:	2327      	movs	r3, #39	@ 0x27
 80023e8:	18fb      	adds	r3, r7, r3
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	2380      	movs	r3, #128	@ 0x80
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4013      	ands	r3, r2
 80023fe:	d00c      	beq.n	800241a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	2201      	movs	r2, #1
 8002404:	4313      	orrs	r3, r2
 8002406:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2280      	movs	r2, #128	@ 0x80
 800240e:	0052      	lsls	r2, r2, #1
 8002410:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002412:	2327      	movs	r3, #39	@ 0x27
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	2380      	movs	r3, #128	@ 0x80
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4013      	ands	r3, r2
 8002422:	d00c      	beq.n	800243e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	2208      	movs	r2, #8
 8002428:	4313      	orrs	r3, r2
 800242a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2280      	movs	r2, #128	@ 0x80
 8002432:	00d2      	lsls	r2, r2, #3
 8002434:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002436:	2327      	movs	r3, #39	@ 0x27
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	2380      	movs	r3, #128	@ 0x80
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4013      	ands	r3, r2
 8002446:	d00c      	beq.n	8002462 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	2202      	movs	r2, #2
 800244c:	4313      	orrs	r3, r2
 800244e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2280      	movs	r2, #128	@ 0x80
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800245a:	2327      	movs	r3, #39	@ 0x27
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	2201      	movs	r2, #1
 8002460:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002462:	2327      	movs	r3, #39	@ 0x27
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01d      	beq.n	80024a8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	0018      	movs	r0, r3
 8002470:	f7ff fe28 	bl	80020c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	490e      	ldr	r1, [pc, #56]	@ (80024b8 <I2C_IsErrorOccurred+0x1ec>)
 8002480:	400a      	ands	r2, r1
 8002482:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	431a      	orrs	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2241      	movs	r2, #65	@ 0x41
 8002494:	2120      	movs	r1, #32
 8002496:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2242      	movs	r2, #66	@ 0x42
 800249c:	2100      	movs	r1, #0
 800249e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2240      	movs	r2, #64	@ 0x40
 80024a4:	2100      	movs	r1, #0
 80024a6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80024a8:	2327      	movs	r3, #39	@ 0x27
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	781b      	ldrb	r3, [r3, #0]
}
 80024ae:	0018      	movs	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b00a      	add	sp, #40	@ 0x28
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	46c0      	nop			@ (mov r8, r8)
 80024b8:	fe00e800 	.word	0xfe00e800

080024bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024bc:	b590      	push	{r4, r7, lr}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	0008      	movs	r0, r1
 80024c6:	0011      	movs	r1, r2
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	240a      	movs	r4, #10
 80024cc:	193b      	adds	r3, r7, r4
 80024ce:	1c02      	adds	r2, r0, #0
 80024d0:	801a      	strh	r2, [r3, #0]
 80024d2:	2009      	movs	r0, #9
 80024d4:	183b      	adds	r3, r7, r0
 80024d6:	1c0a      	adds	r2, r1, #0
 80024d8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024da:	193b      	adds	r3, r7, r4
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	059b      	lsls	r3, r3, #22
 80024e0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024e2:	183b      	adds	r3, r7, r0
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	0419      	lsls	r1, r3, #16
 80024e8:	23ff      	movs	r3, #255	@ 0xff
 80024ea:	041b      	lsls	r3, r3, #16
 80024ec:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024ee:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f6:	4313      	orrs	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	085b      	lsrs	r3, r3, #1
 80024fc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002506:	0d51      	lsrs	r1, r2, #21
 8002508:	2280      	movs	r2, #128	@ 0x80
 800250a:	00d2      	lsls	r2, r2, #3
 800250c:	400a      	ands	r2, r1
 800250e:	4907      	ldr	r1, [pc, #28]	@ (800252c <I2C_TransferConfig+0x70>)
 8002510:	430a      	orrs	r2, r1
 8002512:	43d2      	mvns	r2, r2
 8002514:	401a      	ands	r2, r3
 8002516:	0011      	movs	r1, r2
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	430a      	orrs	r2, r1
 8002520:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002522:	46c0      	nop			@ (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	b007      	add	sp, #28
 8002528:	bd90      	pop	{r4, r7, pc}
 800252a:	46c0      	nop			@ (mov r8, r8)
 800252c:	03ff63ff 	.word	0x03ff63ff

08002530 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2241      	movs	r2, #65	@ 0x41
 800253e:	5c9b      	ldrb	r3, [r3, r2]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b20      	cmp	r3, #32
 8002544:	d138      	bne.n	80025b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2240      	movs	r2, #64	@ 0x40
 800254a:	5c9b      	ldrb	r3, [r3, r2]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002550:	2302      	movs	r3, #2
 8002552:	e032      	b.n	80025ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2240      	movs	r2, #64	@ 0x40
 8002558:	2101      	movs	r1, #1
 800255a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2241      	movs	r2, #65	@ 0x41
 8002560:	2124      	movs	r1, #36	@ 0x24
 8002562:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2101      	movs	r1, #1
 8002570:	438a      	bics	r2, r1
 8002572:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4911      	ldr	r1, [pc, #68]	@ (80025c4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002580:	400a      	ands	r2, r1
 8002582:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6819      	ldr	r1, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2101      	movs	r1, #1
 80025a0:	430a      	orrs	r2, r1
 80025a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2241      	movs	r2, #65	@ 0x41
 80025a8:	2120      	movs	r1, #32
 80025aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2240      	movs	r2, #64	@ 0x40
 80025b0:	2100      	movs	r1, #0
 80025b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025b8:	2302      	movs	r3, #2
  }
}
 80025ba:	0018      	movs	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	b002      	add	sp, #8
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	ffffefff 	.word	0xffffefff

080025c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2241      	movs	r2, #65	@ 0x41
 80025d6:	5c9b      	ldrb	r3, [r3, r2]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b20      	cmp	r3, #32
 80025dc:	d139      	bne.n	8002652 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2240      	movs	r2, #64	@ 0x40
 80025e2:	5c9b      	ldrb	r3, [r3, r2]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e033      	b.n	8002654 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2240      	movs	r2, #64	@ 0x40
 80025f0:	2101      	movs	r1, #1
 80025f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2241      	movs	r2, #65	@ 0x41
 80025f8:	2124      	movs	r1, #36	@ 0x24
 80025fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2101      	movs	r1, #1
 8002608:	438a      	bics	r2, r1
 800260a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4a11      	ldr	r2, [pc, #68]	@ (800265c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002618:	4013      	ands	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2101      	movs	r1, #1
 800263a:	430a      	orrs	r2, r1
 800263c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2241      	movs	r2, #65	@ 0x41
 8002642:	2120      	movs	r1, #32
 8002644:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2240      	movs	r2, #64	@ 0x40
 800264a:	2100      	movs	r1, #0
 800264c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	e000      	b.n	8002654 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002652:	2302      	movs	r3, #2
  }
}
 8002654:	0018      	movs	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	b004      	add	sp, #16
 800265a:	bd80      	pop	{r7, pc}
 800265c:	fffff0ff 	.word	0xfffff0ff

08002660 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002668:	4b19      	ldr	r3, [pc, #100]	@ (80026d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a19      	ldr	r2, [pc, #100]	@ (80026d4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800266e:	4013      	ands	r3, r2
 8002670:	0019      	movs	r1, r3
 8002672:	4b17      	ldr	r3, [pc, #92]	@ (80026d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	430a      	orrs	r2, r1
 8002678:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	2380      	movs	r3, #128	@ 0x80
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	429a      	cmp	r2, r3
 8002682:	d11f      	bne.n	80026c4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002684:	4b14      	ldr	r3, [pc, #80]	@ (80026d8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	0013      	movs	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	189b      	adds	r3, r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4912      	ldr	r1, [pc, #72]	@ (80026dc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002692:	0018      	movs	r0, r3
 8002694:	f7fd fd3e 	bl	8000114 <__udivsi3>
 8002698:	0003      	movs	r3, r0
 800269a:	3301      	adds	r3, #1
 800269c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800269e:	e008      	b.n	80026b2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	e001      	b.n	80026b2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e009      	b.n	80026c6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026b2:	4b07      	ldr	r3, [pc, #28]	@ (80026d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	2380      	movs	r3, #128	@ 0x80
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	401a      	ands	r2, r3
 80026bc:	2380      	movs	r3, #128	@ 0x80
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d0ed      	beq.n	80026a0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	0018      	movs	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b004      	add	sp, #16
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			@ (mov r8, r8)
 80026d0:	40007000 	.word	0x40007000
 80026d4:	fffff9ff 	.word	0xfffff9ff
 80026d8:	20000004 	.word	0x20000004
 80026dc:	000f4240 	.word	0x000f4240

080026e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e2f3      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2201      	movs	r2, #1
 80026f8:	4013      	ands	r3, r2
 80026fa:	d100      	bne.n	80026fe <HAL_RCC_OscConfig+0x1e>
 80026fc:	e07c      	b.n	80027f8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026fe:	4bc3      	ldr	r3, [pc, #780]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2238      	movs	r2, #56	@ 0x38
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002708:	4bc0      	ldr	r3, [pc, #768]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2203      	movs	r2, #3
 800270e:	4013      	ands	r3, r2
 8002710:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b10      	cmp	r3, #16
 8002716:	d102      	bne.n	800271e <HAL_RCC_OscConfig+0x3e>
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b03      	cmp	r3, #3
 800271c:	d002      	beq.n	8002724 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b08      	cmp	r3, #8
 8002722:	d10b      	bne.n	800273c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002724:	4bb9      	ldr	r3, [pc, #740]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	2380      	movs	r3, #128	@ 0x80
 800272a:	029b      	lsls	r3, r3, #10
 800272c:	4013      	ands	r3, r2
 800272e:	d062      	beq.n	80027f6 <HAL_RCC_OscConfig+0x116>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d15e      	bne.n	80027f6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e2ce      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	2380      	movs	r3, #128	@ 0x80
 8002742:	025b      	lsls	r3, r3, #9
 8002744:	429a      	cmp	r2, r3
 8002746:	d107      	bne.n	8002758 <HAL_RCC_OscConfig+0x78>
 8002748:	4bb0      	ldr	r3, [pc, #704]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4baf      	ldr	r3, [pc, #700]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800274e:	2180      	movs	r1, #128	@ 0x80
 8002750:	0249      	lsls	r1, r1, #9
 8002752:	430a      	orrs	r2, r1
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	e020      	b.n	800279a <HAL_RCC_OscConfig+0xba>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	23a0      	movs	r3, #160	@ 0xa0
 800275e:	02db      	lsls	r3, r3, #11
 8002760:	429a      	cmp	r2, r3
 8002762:	d10e      	bne.n	8002782 <HAL_RCC_OscConfig+0xa2>
 8002764:	4ba9      	ldr	r3, [pc, #676]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4ba8      	ldr	r3, [pc, #672]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800276a:	2180      	movs	r1, #128	@ 0x80
 800276c:	02c9      	lsls	r1, r1, #11
 800276e:	430a      	orrs	r2, r1
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	4ba6      	ldr	r3, [pc, #664]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4ba5      	ldr	r3, [pc, #660]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002778:	2180      	movs	r1, #128	@ 0x80
 800277a:	0249      	lsls	r1, r1, #9
 800277c:	430a      	orrs	r2, r1
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e00b      	b.n	800279a <HAL_RCC_OscConfig+0xba>
 8002782:	4ba2      	ldr	r3, [pc, #648]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	4ba1      	ldr	r3, [pc, #644]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002788:	49a1      	ldr	r1, [pc, #644]	@ (8002a10 <HAL_RCC_OscConfig+0x330>)
 800278a:	400a      	ands	r2, r1
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	4b9f      	ldr	r3, [pc, #636]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	4b9e      	ldr	r3, [pc, #632]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002794:	499f      	ldr	r1, [pc, #636]	@ (8002a14 <HAL_RCC_OscConfig+0x334>)
 8002796:	400a      	ands	r2, r1
 8002798:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d014      	beq.n	80027cc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7fe fe41 	bl	8001428 <HAL_GetTick>
 80027a6:	0003      	movs	r3, r0
 80027a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fe fe3c 	bl	8001428 <HAL_GetTick>
 80027b0:	0002      	movs	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	@ 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e28d      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027be:	4b93      	ldr	r3, [pc, #588]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	2380      	movs	r3, #128	@ 0x80
 80027c4:	029b      	lsls	r3, r3, #10
 80027c6:	4013      	ands	r3, r2
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0xcc>
 80027ca:	e015      	b.n	80027f8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fe2c 	bl	8001428 <HAL_GetTick>
 80027d0:	0003      	movs	r3, r0
 80027d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d6:	f7fe fe27 	bl	8001428 <HAL_GetTick>
 80027da:	0002      	movs	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b64      	cmp	r3, #100	@ 0x64
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e278      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027e8:	4b88      	ldr	r3, [pc, #544]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2380      	movs	r3, #128	@ 0x80
 80027ee:	029b      	lsls	r3, r3, #10
 80027f0:	4013      	ands	r3, r2
 80027f2:	d1f0      	bne.n	80027d6 <HAL_RCC_OscConfig+0xf6>
 80027f4:	e000      	b.n	80027f8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2202      	movs	r2, #2
 80027fe:	4013      	ands	r3, r2
 8002800:	d100      	bne.n	8002804 <HAL_RCC_OscConfig+0x124>
 8002802:	e099      	b.n	8002938 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002804:	4b81      	ldr	r3, [pc, #516]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2238      	movs	r2, #56	@ 0x38
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800280e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2203      	movs	r2, #3
 8002814:	4013      	ands	r3, r2
 8002816:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2b10      	cmp	r3, #16
 800281c:	d102      	bne.n	8002824 <HAL_RCC_OscConfig+0x144>
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d002      	beq.n	800282a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d135      	bne.n	8002896 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800282a:	4b78      	ldr	r3, [pc, #480]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	2380      	movs	r3, #128	@ 0x80
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4013      	ands	r3, r2
 8002834:	d005      	beq.n	8002842 <HAL_RCC_OscConfig+0x162>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e24b      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002842:	4b72      	ldr	r3, [pc, #456]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4a74      	ldr	r2, [pc, #464]	@ (8002a18 <HAL_RCC_OscConfig+0x338>)
 8002848:	4013      	ands	r3, r2
 800284a:	0019      	movs	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	021a      	lsls	r2, r3, #8
 8002852:	4b6e      	ldr	r3, [pc, #440]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002854:	430a      	orrs	r2, r1
 8002856:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d112      	bne.n	8002884 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800285e:	4b6b      	ldr	r3, [pc, #428]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a6e      	ldr	r2, [pc, #440]	@ (8002a1c <HAL_RCC_OscConfig+0x33c>)
 8002864:	4013      	ands	r3, r2
 8002866:	0019      	movs	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	4b67      	ldr	r3, [pc, #412]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800286e:	430a      	orrs	r2, r1
 8002870:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002872:	4b66      	ldr	r3, [pc, #408]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	0adb      	lsrs	r3, r3, #11
 8002878:	2207      	movs	r2, #7
 800287a:	4013      	ands	r3, r2
 800287c:	4a68      	ldr	r2, [pc, #416]	@ (8002a20 <HAL_RCC_OscConfig+0x340>)
 800287e:	40da      	lsrs	r2, r3
 8002880:	4b68      	ldr	r3, [pc, #416]	@ (8002a24 <HAL_RCC_OscConfig+0x344>)
 8002882:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002884:	4b68      	ldr	r3, [pc, #416]	@ (8002a28 <HAL_RCC_OscConfig+0x348>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0018      	movs	r0, r3
 800288a:	f7fe fd71 	bl	8001370 <HAL_InitTick>
 800288e:	1e03      	subs	r3, r0, #0
 8002890:	d051      	beq.n	8002936 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e221      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d030      	beq.n	8002900 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800289e:	4b5b      	ldr	r3, [pc, #364]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a5e      	ldr	r2, [pc, #376]	@ (8002a1c <HAL_RCC_OscConfig+0x33c>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	0019      	movs	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	4b57      	ldr	r3, [pc, #348]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80028ae:	430a      	orrs	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80028b2:	4b56      	ldr	r3, [pc, #344]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4b55      	ldr	r3, [pc, #340]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80028b8:	2180      	movs	r1, #128	@ 0x80
 80028ba:	0049      	lsls	r1, r1, #1
 80028bc:	430a      	orrs	r2, r1
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7fe fdb2 	bl	8001428 <HAL_GetTick>
 80028c4:	0003      	movs	r3, r0
 80028c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ca:	f7fe fdad 	bl	8001428 <HAL_GetTick>
 80028ce:	0002      	movs	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e1fe      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028dc:	4b4b      	ldr	r3, [pc, #300]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	2380      	movs	r3, #128	@ 0x80
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4013      	ands	r3, r2
 80028e6:	d0f0      	beq.n	80028ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e8:	4b48      	ldr	r3, [pc, #288]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4a4a      	ldr	r2, [pc, #296]	@ (8002a18 <HAL_RCC_OscConfig+0x338>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	0019      	movs	r1, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	021a      	lsls	r2, r3, #8
 80028f8:	4b44      	ldr	r3, [pc, #272]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	e01b      	b.n	8002938 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002900:	4b42      	ldr	r3, [pc, #264]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b41      	ldr	r3, [pc, #260]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002906:	4949      	ldr	r1, [pc, #292]	@ (8002a2c <HAL_RCC_OscConfig+0x34c>)
 8002908:	400a      	ands	r2, r1
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe fd8c 	bl	8001428 <HAL_GetTick>
 8002910:	0003      	movs	r3, r0
 8002912:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002916:	f7fe fd87 	bl	8001428 <HAL_GetTick>
 800291a:	0002      	movs	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e1d8      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002928:	4b38      	ldr	r3, [pc, #224]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2380      	movs	r3, #128	@ 0x80
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4013      	ands	r3, r2
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x236>
 8002934:	e000      	b.n	8002938 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002936:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2208      	movs	r2, #8
 800293e:	4013      	ands	r3, r2
 8002940:	d047      	beq.n	80029d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002942:	4b32      	ldr	r3, [pc, #200]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2238      	movs	r2, #56	@ 0x38
 8002948:	4013      	ands	r3, r2
 800294a:	2b18      	cmp	r3, #24
 800294c:	d10a      	bne.n	8002964 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800294e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002952:	2202      	movs	r2, #2
 8002954:	4013      	ands	r3, r2
 8002956:	d03c      	beq.n	80029d2 <HAL_RCC_OscConfig+0x2f2>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d138      	bne.n	80029d2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e1ba      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d019      	beq.n	80029a0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800296c:	4b27      	ldr	r3, [pc, #156]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 800296e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002970:	4b26      	ldr	r3, [pc, #152]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002972:	2101      	movs	r1, #1
 8002974:	430a      	orrs	r2, r1
 8002976:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe fd56 	bl	8001428 <HAL_GetTick>
 800297c:	0003      	movs	r3, r0
 800297e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002982:	f7fe fd51 	bl	8001428 <HAL_GetTick>
 8002986:	0002      	movs	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e1a2      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002994:	4b1d      	ldr	r3, [pc, #116]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 8002996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002998:	2202      	movs	r2, #2
 800299a:	4013      	ands	r3, r2
 800299c:	d0f1      	beq.n	8002982 <HAL_RCC_OscConfig+0x2a2>
 800299e:	e018      	b.n	80029d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80029a0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80029a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029a4:	4b19      	ldr	r3, [pc, #100]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80029a6:	2101      	movs	r1, #1
 80029a8:	438a      	bics	r2, r1
 80029aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7fe fd3c 	bl	8001428 <HAL_GetTick>
 80029b0:	0003      	movs	r3, r0
 80029b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b6:	f7fe fd37 	bl	8001428 <HAL_GetTick>
 80029ba:	0002      	movs	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e188      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029c8:	4b10      	ldr	r3, [pc, #64]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80029ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029cc:	2202      	movs	r2, #2
 80029ce:	4013      	ands	r3, r2
 80029d0:	d1f1      	bne.n	80029b6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2204      	movs	r2, #4
 80029d8:	4013      	ands	r3, r2
 80029da:	d100      	bne.n	80029de <HAL_RCC_OscConfig+0x2fe>
 80029dc:	e0c6      	b.n	8002b6c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029de:	231f      	movs	r3, #31
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029e6:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2238      	movs	r2, #56	@ 0x38
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	d11e      	bne.n	8002a30 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80029f2:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <HAL_RCC_OscConfig+0x32c>)
 80029f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f6:	2202      	movs	r2, #2
 80029f8:	4013      	ands	r3, r2
 80029fa:	d100      	bne.n	80029fe <HAL_RCC_OscConfig+0x31e>
 80029fc:	e0b6      	b.n	8002b6c <HAL_RCC_OscConfig+0x48c>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d000      	beq.n	8002a08 <HAL_RCC_OscConfig+0x328>
 8002a06:	e0b1      	b.n	8002b6c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e166      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	fffeffff 	.word	0xfffeffff
 8002a14:	fffbffff 	.word	0xfffbffff
 8002a18:	ffff80ff 	.word	0xffff80ff
 8002a1c:	ffffc7ff 	.word	0xffffc7ff
 8002a20:	00f42400 	.word	0x00f42400
 8002a24:	20000004 	.word	0x20000004
 8002a28:	20000008 	.word	0x20000008
 8002a2c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a30:	4bac      	ldr	r3, [pc, #688]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002a32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a34:	2380      	movs	r3, #128	@ 0x80
 8002a36:	055b      	lsls	r3, r3, #21
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_OscConfig+0x360>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x362>
 8002a40:	2300      	movs	r3, #0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d011      	beq.n	8002a6a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a46:	4ba7      	ldr	r3, [pc, #668]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002a48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a4a:	4ba6      	ldr	r3, [pc, #664]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002a4c:	2180      	movs	r1, #128	@ 0x80
 8002a4e:	0549      	lsls	r1, r1, #21
 8002a50:	430a      	orrs	r2, r1
 8002a52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a54:	4ba3      	ldr	r3, [pc, #652]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002a56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a58:	2380      	movs	r3, #128	@ 0x80
 8002a5a:	055b      	lsls	r3, r3, #21
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a62:	231f      	movs	r3, #31
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a6a:	4b9f      	ldr	r3, [pc, #636]	@ (8002ce8 <HAL_RCC_OscConfig+0x608>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	2380      	movs	r3, #128	@ 0x80
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4013      	ands	r3, r2
 8002a74:	d11a      	bne.n	8002aac <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a76:	4b9c      	ldr	r3, [pc, #624]	@ (8002ce8 <HAL_RCC_OscConfig+0x608>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4b9b      	ldr	r3, [pc, #620]	@ (8002ce8 <HAL_RCC_OscConfig+0x608>)
 8002a7c:	2180      	movs	r1, #128	@ 0x80
 8002a7e:	0049      	lsls	r1, r1, #1
 8002a80:	430a      	orrs	r2, r1
 8002a82:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002a84:	f7fe fcd0 	bl	8001428 <HAL_GetTick>
 8002a88:	0003      	movs	r3, r0
 8002a8a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8e:	f7fe fccb 	bl	8001428 <HAL_GetTick>
 8002a92:	0002      	movs	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e11c      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa0:	4b91      	ldr	r3, [pc, #580]	@ (8002ce8 <HAL_RCC_OscConfig+0x608>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	2380      	movs	r3, #128	@ 0x80
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d106      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x3e2>
 8002ab4:	4b8b      	ldr	r3, [pc, #556]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002ab6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ab8:	4b8a      	ldr	r3, [pc, #552]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002aba:	2101      	movs	r1, #1
 8002abc:	430a      	orrs	r2, r1
 8002abe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ac0:	e01c      	b.n	8002afc <HAL_RCC_OscConfig+0x41c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b05      	cmp	r3, #5
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x404>
 8002aca:	4b86      	ldr	r3, [pc, #536]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002acc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ace:	4b85      	ldr	r3, [pc, #532]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002ad0:	2104      	movs	r1, #4
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ad6:	4b83      	ldr	r3, [pc, #524]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002ad8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ada:	4b82      	ldr	r3, [pc, #520]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002adc:	2101      	movs	r1, #1
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ae2:	e00b      	b.n	8002afc <HAL_RCC_OscConfig+0x41c>
 8002ae4:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002ae6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ae8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002aea:	2101      	movs	r1, #1
 8002aec:	438a      	bics	r2, r1
 8002aee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002af0:	4b7c      	ldr	r3, [pc, #496]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002af2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002af4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002af6:	2104      	movs	r1, #4
 8002af8:	438a      	bics	r2, r1
 8002afa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d014      	beq.n	8002b2e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fc90 	bl	8001428 <HAL_GetTick>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b0c:	e009      	b.n	8002b22 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7fe fc8b 	bl	8001428 <HAL_GetTick>
 8002b12:	0002      	movs	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	4a74      	ldr	r2, [pc, #464]	@ (8002cec <HAL_RCC_OscConfig+0x60c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e0db      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b22:	4b70      	ldr	r3, [pc, #448]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b26:	2202      	movs	r2, #2
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x42e>
 8002b2c:	e013      	b.n	8002b56 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2e:	f7fe fc7b 	bl	8001428 <HAL_GetTick>
 8002b32:	0003      	movs	r3, r0
 8002b34:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b36:	e009      	b.n	8002b4c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b38:	f7fe fc76 	bl	8001428 <HAL_GetTick>
 8002b3c:	0002      	movs	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	4a6a      	ldr	r2, [pc, #424]	@ (8002cec <HAL_RCC_OscConfig+0x60c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e0c6      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b4c:	4b65      	ldr	r3, [pc, #404]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b50:	2202      	movs	r2, #2
 8002b52:	4013      	ands	r3, r2
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b56:	231f      	movs	r3, #31
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d105      	bne.n	8002b6c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b60:	4b60      	ldr	r3, [pc, #384]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002b62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b64:	4b5f      	ldr	r3, [pc, #380]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002b66:	4962      	ldr	r1, [pc, #392]	@ (8002cf0 <HAL_RCC_OscConfig+0x610>)
 8002b68:	400a      	ands	r2, r1
 8002b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d100      	bne.n	8002b76 <HAL_RCC_OscConfig+0x496>
 8002b74:	e0b0      	b.n	8002cd8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b76:	4b5b      	ldr	r3, [pc, #364]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2238      	movs	r2, #56	@ 0x38
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b10      	cmp	r3, #16
 8002b80:	d100      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4a4>
 8002b82:	e078      	b.n	8002c76 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d153      	bne.n	8002c34 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8c:	4b55      	ldr	r3, [pc, #340]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b54      	ldr	r3, [pc, #336]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002b92:	4958      	ldr	r1, [pc, #352]	@ (8002cf4 <HAL_RCC_OscConfig+0x614>)
 8002b94:	400a      	ands	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe fc46 	bl	8001428 <HAL_GetTick>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba2:	f7fe fc41 	bl	8001428 <HAL_GetTick>
 8002ba6:	0002      	movs	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e092      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2380      	movs	r3, #128	@ 0x80
 8002bba:	049b      	lsls	r3, r3, #18
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc0:	4b48      	ldr	r3, [pc, #288]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4a4c      	ldr	r2, [pc, #304]	@ (8002cf8 <HAL_RCC_OscConfig+0x618>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	0019      	movs	r1, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1a      	ldr	r2, [r3, #32]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	431a      	orrs	r2, r3
 8002be8:	4b3e      	ldr	r3, [pc, #248]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002bea:	430a      	orrs	r2, r1
 8002bec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bee:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002bf4:	2180      	movs	r1, #128	@ 0x80
 8002bf6:	0449      	lsls	r1, r1, #17
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002bfc:	4b39      	ldr	r3, [pc, #228]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	4b38      	ldr	r3, [pc, #224]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002c02:	2180      	movs	r1, #128	@ 0x80
 8002c04:	0549      	lsls	r1, r1, #21
 8002c06:	430a      	orrs	r2, r1
 8002c08:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7fe fc0d 	bl	8001428 <HAL_GetTick>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe fc08 	bl	8001428 <HAL_GetTick>
 8002c18:	0002      	movs	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e059      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c26:	4b2f      	ldr	r3, [pc, #188]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	2380      	movs	r3, #128	@ 0x80
 8002c2c:	049b      	lsls	r3, r3, #18
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x534>
 8002c32:	e051      	b.n	8002cd8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c34:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002c3a:	492e      	ldr	r1, [pc, #184]	@ (8002cf4 <HAL_RCC_OscConfig+0x614>)
 8002c3c:	400a      	ands	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe fbf2 	bl	8001428 <HAL_GetTick>
 8002c44:	0003      	movs	r3, r0
 8002c46:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4a:	f7fe fbed 	bl	8001428 <HAL_GetTick>
 8002c4e:	0002      	movs	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e03e      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5c:	4b21      	ldr	r3, [pc, #132]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	2380      	movs	r3, #128	@ 0x80
 8002c62:	049b      	lsls	r3, r3, #18
 8002c64:	4013      	ands	r3, r2
 8002c66:	d1f0      	bne.n	8002c4a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002c68:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002c6e:	4923      	ldr	r1, [pc, #140]	@ (8002cfc <HAL_RCC_OscConfig+0x61c>)
 8002c70:	400a      	ands	r2, r1
 8002c72:	60da      	str	r2, [r3, #12]
 8002c74:	e030      	b.n	8002cd8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e02b      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c82:	4b18      	ldr	r3, [pc, #96]	@ (8002ce4 <HAL_RCC_OscConfig+0x604>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	401a      	ands	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d11e      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2270      	movs	r2, #112	@ 0x70
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d117      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	23fe      	movs	r3, #254	@ 0xfe
 8002ca8:	01db      	lsls	r3, r3, #7
 8002caa:	401a      	ands	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d10e      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	23f8      	movs	r3, #248	@ 0xf8
 8002cba:	039b      	lsls	r3, r3, #14
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d106      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	0f5b      	lsrs	r3, r3, #29
 8002cca:	075a      	lsls	r2, r3, #29
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	0018      	movs	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b008      	add	sp, #32
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			@ (mov r8, r8)
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	00001388 	.word	0x00001388
 8002cf0:	efffffff 	.word	0xefffffff
 8002cf4:	feffffff 	.word	0xfeffffff
 8002cf8:	1fc1808c 	.word	0x1fc1808c
 8002cfc:	effefffc 	.word	0xeffefffc

08002d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0e9      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d14:	4b76      	ldr	r3, [pc, #472]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2207      	movs	r2, #7
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d91e      	bls.n	8002d60 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b73      	ldr	r3, [pc, #460]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2207      	movs	r2, #7
 8002d28:	4393      	bics	r3, r2
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	4b70      	ldr	r3, [pc, #448]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d34:	f7fe fb78 	bl	8001428 <HAL_GetTick>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d3c:	e009      	b.n	8002d52 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3e:	f7fe fb73 	bl	8001428 <HAL_GetTick>
 8002d42:	0002      	movs	r2, r0
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	4a6a      	ldr	r2, [pc, #424]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e0ca      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d52:	4b67      	ldr	r3, [pc, #412]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2207      	movs	r2, #7
 8002d58:	4013      	ands	r3, r2
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d1ee      	bne.n	8002d3e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2202      	movs	r2, #2
 8002d66:	4013      	ands	r3, r2
 8002d68:	d015      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2204      	movs	r2, #4
 8002d70:	4013      	ands	r3, r2
 8002d72:	d006      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d74:	4b60      	ldr	r3, [pc, #384]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	4b5f      	ldr	r3, [pc, #380]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d7a:	21e0      	movs	r1, #224	@ 0xe0
 8002d7c:	01c9      	lsls	r1, r1, #7
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d82:	4b5d      	ldr	r3, [pc, #372]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	4a5d      	ldr	r2, [pc, #372]	@ (8002efc <HAL_RCC_ClockConfig+0x1fc>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	0019      	movs	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	4b59      	ldr	r3, [pc, #356]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d92:	430a      	orrs	r2, r1
 8002d94:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d057      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d107      	bne.n	8002db8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002da8:	4b53      	ldr	r3, [pc, #332]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	2380      	movs	r3, #128	@ 0x80
 8002dae:	029b      	lsls	r3, r3, #10
 8002db0:	4013      	ands	r3, r2
 8002db2:	d12b      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e097      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d107      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	2380      	movs	r3, #128	@ 0x80
 8002dc6:	049b      	lsls	r3, r3, #18
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d11f      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e08b      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d107      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dd8:	4b47      	ldr	r3, [pc, #284]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	2380      	movs	r3, #128	@ 0x80
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4013      	ands	r3, r2
 8002de2:	d113      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e07f      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d106      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002df0:	4b41      	ldr	r3, [pc, #260]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8002df2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002df4:	2202      	movs	r2, #2
 8002df6:	4013      	ands	r3, r2
 8002df8:	d108      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e074      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8002e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e02:	2202      	movs	r2, #2
 8002e04:	4013      	ands	r3, r2
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e06d      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2207      	movs	r2, #7
 8002e12:	4393      	bics	r3, r2
 8002e14:	0019      	movs	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	4b37      	ldr	r3, [pc, #220]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e20:	f7fe fb02 	bl	8001428 <HAL_GetTick>
 8002e24:	0003      	movs	r3, r0
 8002e26:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e28:	e009      	b.n	8002e3e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2a:	f7fe fafd 	bl	8001428 <HAL_GetTick>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	4a2f      	ldr	r2, [pc, #188]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e054      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2238      	movs	r2, #56	@ 0x38
 8002e44:	401a      	ands	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d1ec      	bne.n	8002e2a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e50:	4b27      	ldr	r3, [pc, #156]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2207      	movs	r2, #7
 8002e56:	4013      	ands	r3, r2
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d21e      	bcs.n	8002e9c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b24      	ldr	r3, [pc, #144]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2207      	movs	r2, #7
 8002e64:	4393      	bics	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	4b21      	ldr	r3, [pc, #132]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e70:	f7fe fada 	bl	8001428 <HAL_GetTick>
 8002e74:	0003      	movs	r3, r0
 8002e76:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e78:	e009      	b.n	8002e8e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7a:	f7fe fad5 	bl	8001428 <HAL_GetTick>
 8002e7e:	0002      	movs	r2, r0
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e02c      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e8e:	4b18      	ldr	r3, [pc, #96]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2207      	movs	r2, #7
 8002e94:	4013      	ands	r3, r2
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d1ee      	bne.n	8002e7a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2204      	movs	r2, #4
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d009      	beq.n	8002eba <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea6:	4b14      	ldr	r3, [pc, #80]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	4a15      	ldr	r2, [pc, #84]	@ (8002f00 <HAL_RCC_ClockConfig+0x200>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	0019      	movs	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002eba:	f000 f829 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002ebe:	0001      	movs	r1, r0
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	0a1b      	lsrs	r3, r3, #8
 8002ec6:	220f      	movs	r2, #15
 8002ec8:	401a      	ands	r2, r3
 8002eca:	4b0e      	ldr	r3, [pc, #56]	@ (8002f04 <HAL_RCC_ClockConfig+0x204>)
 8002ecc:	0092      	lsls	r2, r2, #2
 8002ece:	58d3      	ldr	r3, [r2, r3]
 8002ed0:	221f      	movs	r2, #31
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	000a      	movs	r2, r1
 8002ed6:	40da      	lsrs	r2, r3
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <HAL_RCC_ClockConfig+0x208>)
 8002eda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002edc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f0c <HAL_RCC_ClockConfig+0x20c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f7fe fa45 	bl	8001370 <HAL_InitTick>
 8002ee6:	0003      	movs	r3, r0
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b004      	add	sp, #16
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40022000 	.word	0x40022000
 8002ef4:	00001388 	.word	0x00001388
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	fffff0ff 	.word	0xfffff0ff
 8002f00:	ffff8fff 	.word	0xffff8fff
 8002f04:	08003c80 	.word	0x08003c80
 8002f08:	20000004 	.word	0x20000004
 8002f0c:	20000008 	.word	0x20000008

08002f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f16:	4b3c      	ldr	r3, [pc, #240]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2238      	movs	r2, #56	@ 0x38
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d10f      	bne.n	8002f40 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f20:	4b39      	ldr	r3, [pc, #228]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0adb      	lsrs	r3, r3, #11
 8002f26:	2207      	movs	r2, #7
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	409a      	lsls	r2, r3
 8002f2e:	0013      	movs	r3, r2
 8002f30:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f32:	6839      	ldr	r1, [r7, #0]
 8002f34:	4835      	ldr	r0, [pc, #212]	@ (800300c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f36:	f7fd f8ed 	bl	8000114 <__udivsi3>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	e05d      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f40:	4b31      	ldr	r3, [pc, #196]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2238      	movs	r2, #56	@ 0x38
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d102      	bne.n	8002f52 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f4c:	4b30      	ldr	r3, [pc, #192]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	e054      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f52:	4b2d      	ldr	r3, [pc, #180]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2238      	movs	r2, #56	@ 0x38
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b10      	cmp	r3, #16
 8002f5c:	d138      	bne.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2203      	movs	r2, #3
 8002f64:	4013      	ands	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f68:	4b27      	ldr	r3, [pc, #156]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	2207      	movs	r2, #7
 8002f70:	4013      	ands	r3, r2
 8002f72:	3301      	adds	r3, #1
 8002f74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d10d      	bne.n	8002f98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	4824      	ldr	r0, [pc, #144]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f80:	f7fd f8c8 	bl	8000114 <__udivsi3>
 8002f84:	0003      	movs	r3, r0
 8002f86:	0019      	movs	r1, r3
 8002f88:	4b1f      	ldr	r3, [pc, #124]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	0a1b      	lsrs	r3, r3, #8
 8002f8e:	227f      	movs	r2, #127	@ 0x7f
 8002f90:	4013      	ands	r3, r2
 8002f92:	434b      	muls	r3, r1
 8002f94:	617b      	str	r3, [r7, #20]
        break;
 8002f96:	e00d      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	481c      	ldr	r0, [pc, #112]	@ (800300c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f9c:	f7fd f8ba 	bl	8000114 <__udivsi3>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	4b18      	ldr	r3, [pc, #96]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	227f      	movs	r2, #127	@ 0x7f
 8002fac:	4013      	ands	r3, r2
 8002fae:	434b      	muls	r3, r1
 8002fb0:	617b      	str	r3, [r7, #20]
        break;
 8002fb2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002fb4:	4b14      	ldr	r3, [pc, #80]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	0f5b      	lsrs	r3, r3, #29
 8002fba:	2207      	movs	r2, #7
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	6978      	ldr	r0, [r7, #20]
 8002fc6:	f7fd f8a5 	bl	8000114 <__udivsi3>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	e015      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2238      	movs	r2, #56	@ 0x38
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d103      	bne.n	8002fe4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002fdc:	2380      	movs	r3, #128	@ 0x80
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	e00b      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002fe4:	4b08      	ldr	r3, [pc, #32]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2238      	movs	r2, #56	@ 0x38
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b18      	cmp	r3, #24
 8002fee:	d103      	bne.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ff0:	23fa      	movs	r3, #250	@ 0xfa
 8002ff2:	01db      	lsls	r3, r3, #7
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	e001      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ffc:	693b      	ldr	r3, [r7, #16]
}
 8002ffe:	0018      	movs	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	b006      	add	sp, #24
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			@ (mov r8, r8)
 8003008:	40021000 	.word	0x40021000
 800300c:	00f42400 	.word	0x00f42400
 8003010:	007a1200 	.word	0x007a1200

08003014 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800301c:	2313      	movs	r3, #19
 800301e:	18fb      	adds	r3, r7, r3
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003024:	2312      	movs	r3, #18
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	2380      	movs	r3, #128	@ 0x80
 8003032:	029b      	lsls	r3, r3, #10
 8003034:	4013      	ands	r3, r2
 8003036:	d100      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003038:	e0a3      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303a:	2011      	movs	r0, #17
 800303c:	183b      	adds	r3, r7, r0
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003042:	4b7f      	ldr	r3, [pc, #508]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003044:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003046:	2380      	movs	r3, #128	@ 0x80
 8003048:	055b      	lsls	r3, r3, #21
 800304a:	4013      	ands	r3, r2
 800304c:	d110      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304e:	4b7c      	ldr	r3, [pc, #496]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003050:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003052:	4b7b      	ldr	r3, [pc, #492]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003054:	2180      	movs	r1, #128	@ 0x80
 8003056:	0549      	lsls	r1, r1, #21
 8003058:	430a      	orrs	r2, r1
 800305a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800305c:	4b78      	ldr	r3, [pc, #480]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800305e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003060:	2380      	movs	r3, #128	@ 0x80
 8003062:	055b      	lsls	r3, r3, #21
 8003064:	4013      	ands	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800306a:	183b      	adds	r3, r7, r0
 800306c:	2201      	movs	r2, #1
 800306e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003070:	4b74      	ldr	r3, [pc, #464]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b73      	ldr	r3, [pc, #460]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003076:	2180      	movs	r1, #128	@ 0x80
 8003078:	0049      	lsls	r1, r1, #1
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800307e:	f7fe f9d3 	bl	8001428 <HAL_GetTick>
 8003082:	0003      	movs	r3, r0
 8003084:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003086:	e00b      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003088:	f7fe f9ce 	bl	8001428 <HAL_GetTick>
 800308c:	0002      	movs	r2, r0
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d904      	bls.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003096:	2313      	movs	r3, #19
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	2203      	movs	r2, #3
 800309c:	701a      	strb	r2, [r3, #0]
        break;
 800309e:	e005      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030a0:	4b68      	ldr	r3, [pc, #416]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	2380      	movs	r3, #128	@ 0x80
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4013      	ands	r3, r2
 80030aa:	d0ed      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80030ac:	2313      	movs	r3, #19
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d154      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030b6:	4b62      	ldr	r3, [pc, #392]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030ba:	23c0      	movs	r3, #192	@ 0xc0
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4013      	ands	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d019      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d014      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d6:	4a5c      	ldr	r2, [pc, #368]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80030d8:	4013      	ands	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030dc:	4b58      	ldr	r3, [pc, #352]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030e0:	4b57      	ldr	r3, [pc, #348]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030e2:	2180      	movs	r1, #128	@ 0x80
 80030e4:	0249      	lsls	r1, r1, #9
 80030e6:	430a      	orrs	r2, r1
 80030e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030ea:	4b55      	ldr	r3, [pc, #340]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030ee:	4b54      	ldr	r3, [pc, #336]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030f0:	4956      	ldr	r1, [pc, #344]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80030f2:	400a      	ands	r2, r1
 80030f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030f6:	4b52      	ldr	r3, [pc, #328]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2201      	movs	r2, #1
 8003100:	4013      	ands	r3, r2
 8003102:	d016      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7fe f990 	bl	8001428 <HAL_GetTick>
 8003108:	0003      	movs	r3, r0
 800310a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800310c:	e00c      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310e:	f7fe f98b 	bl	8001428 <HAL_GetTick>
 8003112:	0002      	movs	r2, r0
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	4a4d      	ldr	r2, [pc, #308]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d904      	bls.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800311e:	2313      	movs	r3, #19
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	2203      	movs	r2, #3
 8003124:	701a      	strb	r2, [r3, #0]
            break;
 8003126:	e004      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003128:	4b45      	ldr	r3, [pc, #276]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800312a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312c:	2202      	movs	r2, #2
 800312e:	4013      	ands	r3, r2
 8003130:	d0ed      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003132:	2313      	movs	r3, #19
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800313c:	4b40      	ldr	r3, [pc, #256]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800313e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003140:	4a41      	ldr	r2, [pc, #260]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003142:	4013      	ands	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	4b3d      	ldr	r3, [pc, #244]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800314c:	430a      	orrs	r2, r1
 800314e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003150:	e00c      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003152:	2312      	movs	r3, #18
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	2213      	movs	r2, #19
 8003158:	18ba      	adds	r2, r7, r2
 800315a:	7812      	ldrb	r2, [r2, #0]
 800315c:	701a      	strb	r2, [r3, #0]
 800315e:	e005      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003160:	2312      	movs	r3, #18
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	2213      	movs	r2, #19
 8003166:	18ba      	adds	r2, r7, r2
 8003168:	7812      	ldrb	r2, [r2, #0]
 800316a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800316c:	2311      	movs	r3, #17
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d105      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003176:	4b32      	ldr	r3, [pc, #200]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003178:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800317a:	4b31      	ldr	r3, [pc, #196]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800317c:	4935      	ldr	r1, [pc, #212]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800317e:	400a      	ands	r2, r1
 8003180:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2201      	movs	r2, #1
 8003188:	4013      	ands	r3, r2
 800318a:	d009      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800318c:	4b2c      	ldr	r3, [pc, #176]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800318e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003190:	2203      	movs	r2, #3
 8003192:	4393      	bics	r3, r2
 8003194:	0019      	movs	r1, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	4b29      	ldr	r3, [pc, #164]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800319c:	430a      	orrs	r2, r1
 800319e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2220      	movs	r2, #32
 80031a6:	4013      	ands	r3, r2
 80031a8:	d009      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031aa:	4b25      	ldr	r3, [pc, #148]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80031ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	0019      	movs	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	4b21      	ldr	r3, [pc, #132]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80031ba:	430a      	orrs	r2, r1
 80031bc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	2380      	movs	r3, #128	@ 0x80
 80031c4:	01db      	lsls	r3, r3, #7
 80031c6:	4013      	ands	r3, r2
 80031c8:	d015      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80031cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	0899      	lsrs	r1, r3, #2
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80031d8:	430a      	orrs	r2, r1
 80031da:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	2380      	movs	r3, #128	@ 0x80
 80031e2:	05db      	lsls	r3, r3, #23
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d106      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80031e8:	4b15      	ldr	r3, [pc, #84]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	4b14      	ldr	r3, [pc, #80]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80031ee:	2180      	movs	r1, #128	@ 0x80
 80031f0:	0249      	lsls	r1, r1, #9
 80031f2:	430a      	orrs	r2, r1
 80031f4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	2380      	movs	r3, #128	@ 0x80
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	4013      	ands	r3, r2
 8003200:	d016      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003202:	4b0f      	ldr	r3, [pc, #60]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003206:	4a15      	ldr	r2, [pc, #84]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003208:	4013      	ands	r3, r2
 800320a:	0019      	movs	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	4b0b      	ldr	r3, [pc, #44]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003212:	430a      	orrs	r2, r1
 8003214:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	2380      	movs	r3, #128	@ 0x80
 800321c:	01db      	lsls	r3, r3, #7
 800321e:	429a      	cmp	r2, r3
 8003220:	d106      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003222:	4b07      	ldr	r3, [pc, #28]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003228:	2180      	movs	r1, #128	@ 0x80
 800322a:	0249      	lsls	r1, r1, #9
 800322c:	430a      	orrs	r2, r1
 800322e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003230:	2312      	movs	r3, #18
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	781b      	ldrb	r3, [r3, #0]
}
 8003236:	0018      	movs	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	b006      	add	sp, #24
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	40021000 	.word	0x40021000
 8003244:	40007000 	.word	0x40007000
 8003248:	fffffcff 	.word	0xfffffcff
 800324c:	fffeffff 	.word	0xfffeffff
 8003250:	00001388 	.word	0x00001388
 8003254:	efffffff 	.word	0xefffffff
 8003258:	ffffcfff 	.word	0xffffcfff
 800325c:	ffff3fff 	.word	0xffff3fff

08003260 <siprintf>:
 8003260:	b40e      	push	{r1, r2, r3}
 8003262:	b500      	push	{lr}
 8003264:	490b      	ldr	r1, [pc, #44]	@ (8003294 <siprintf+0x34>)
 8003266:	b09c      	sub	sp, #112	@ 0x70
 8003268:	ab1d      	add	r3, sp, #116	@ 0x74
 800326a:	9002      	str	r0, [sp, #8]
 800326c:	9006      	str	r0, [sp, #24]
 800326e:	9107      	str	r1, [sp, #28]
 8003270:	9104      	str	r1, [sp, #16]
 8003272:	4809      	ldr	r0, [pc, #36]	@ (8003298 <siprintf+0x38>)
 8003274:	4909      	ldr	r1, [pc, #36]	@ (800329c <siprintf+0x3c>)
 8003276:	cb04      	ldmia	r3!, {r2}
 8003278:	9105      	str	r1, [sp, #20]
 800327a:	6800      	ldr	r0, [r0, #0]
 800327c:	a902      	add	r1, sp, #8
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	f000 f99e 	bl	80035c0 <_svfiprintf_r>
 8003284:	2200      	movs	r2, #0
 8003286:	9b02      	ldr	r3, [sp, #8]
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	b01c      	add	sp, #112	@ 0x70
 800328c:	bc08      	pop	{r3}
 800328e:	b003      	add	sp, #12
 8003290:	4718      	bx	r3
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	7fffffff 	.word	0x7fffffff
 8003298:	20000010 	.word	0x20000010
 800329c:	ffff0208 	.word	0xffff0208

080032a0 <memset>:
 80032a0:	0003      	movs	r3, r0
 80032a2:	1882      	adds	r2, r0, r2
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d100      	bne.n	80032aa <memset+0xa>
 80032a8:	4770      	bx	lr
 80032aa:	7019      	strb	r1, [r3, #0]
 80032ac:	3301      	adds	r3, #1
 80032ae:	e7f9      	b.n	80032a4 <memset+0x4>

080032b0 <__errno>:
 80032b0:	4b01      	ldr	r3, [pc, #4]	@ (80032b8 <__errno+0x8>)
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	4770      	bx	lr
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	20000010 	.word	0x20000010

080032bc <__libc_init_array>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2600      	movs	r6, #0
 80032c0:	4c0c      	ldr	r4, [pc, #48]	@ (80032f4 <__libc_init_array+0x38>)
 80032c2:	4d0d      	ldr	r5, [pc, #52]	@ (80032f8 <__libc_init_array+0x3c>)
 80032c4:	1b64      	subs	r4, r4, r5
 80032c6:	10a4      	asrs	r4, r4, #2
 80032c8:	42a6      	cmp	r6, r4
 80032ca:	d109      	bne.n	80032e0 <__libc_init_array+0x24>
 80032cc:	2600      	movs	r6, #0
 80032ce:	f000 fc65 	bl	8003b9c <_init>
 80032d2:	4c0a      	ldr	r4, [pc, #40]	@ (80032fc <__libc_init_array+0x40>)
 80032d4:	4d0a      	ldr	r5, [pc, #40]	@ (8003300 <__libc_init_array+0x44>)
 80032d6:	1b64      	subs	r4, r4, r5
 80032d8:	10a4      	asrs	r4, r4, #2
 80032da:	42a6      	cmp	r6, r4
 80032dc:	d105      	bne.n	80032ea <__libc_init_array+0x2e>
 80032de:	bd70      	pop	{r4, r5, r6, pc}
 80032e0:	00b3      	lsls	r3, r6, #2
 80032e2:	58eb      	ldr	r3, [r5, r3]
 80032e4:	4798      	blx	r3
 80032e6:	3601      	adds	r6, #1
 80032e8:	e7ee      	b.n	80032c8 <__libc_init_array+0xc>
 80032ea:	00b3      	lsls	r3, r6, #2
 80032ec:	58eb      	ldr	r3, [r5, r3]
 80032ee:	4798      	blx	r3
 80032f0:	3601      	adds	r6, #1
 80032f2:	e7f2      	b.n	80032da <__libc_init_array+0x1e>
 80032f4:	08003cf4 	.word	0x08003cf4
 80032f8:	08003cf4 	.word	0x08003cf4
 80032fc:	08003cf8 	.word	0x08003cf8
 8003300:	08003cf4 	.word	0x08003cf4

08003304 <__retarget_lock_acquire_recursive>:
 8003304:	4770      	bx	lr

08003306 <__retarget_lock_release_recursive>:
 8003306:	4770      	bx	lr

08003308 <_free_r>:
 8003308:	b570      	push	{r4, r5, r6, lr}
 800330a:	0005      	movs	r5, r0
 800330c:	1e0c      	subs	r4, r1, #0
 800330e:	d010      	beq.n	8003332 <_free_r+0x2a>
 8003310:	3c04      	subs	r4, #4
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	da00      	bge.n	800331a <_free_r+0x12>
 8003318:	18e4      	adds	r4, r4, r3
 800331a:	0028      	movs	r0, r5
 800331c:	f000 f8e0 	bl	80034e0 <__malloc_lock>
 8003320:	4a1d      	ldr	r2, [pc, #116]	@ (8003398 <_free_r+0x90>)
 8003322:	6813      	ldr	r3, [r2, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d105      	bne.n	8003334 <_free_r+0x2c>
 8003328:	6063      	str	r3, [r4, #4]
 800332a:	6014      	str	r4, [r2, #0]
 800332c:	0028      	movs	r0, r5
 800332e:	f000 f8df 	bl	80034f0 <__malloc_unlock>
 8003332:	bd70      	pop	{r4, r5, r6, pc}
 8003334:	42a3      	cmp	r3, r4
 8003336:	d908      	bls.n	800334a <_free_r+0x42>
 8003338:	6820      	ldr	r0, [r4, #0]
 800333a:	1821      	adds	r1, r4, r0
 800333c:	428b      	cmp	r3, r1
 800333e:	d1f3      	bne.n	8003328 <_free_r+0x20>
 8003340:	6819      	ldr	r1, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	1809      	adds	r1, r1, r0
 8003346:	6021      	str	r1, [r4, #0]
 8003348:	e7ee      	b.n	8003328 <_free_r+0x20>
 800334a:	001a      	movs	r2, r3
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <_free_r+0x4e>
 8003352:	42a3      	cmp	r3, r4
 8003354:	d9f9      	bls.n	800334a <_free_r+0x42>
 8003356:	6811      	ldr	r1, [r2, #0]
 8003358:	1850      	adds	r0, r2, r1
 800335a:	42a0      	cmp	r0, r4
 800335c:	d10b      	bne.n	8003376 <_free_r+0x6e>
 800335e:	6820      	ldr	r0, [r4, #0]
 8003360:	1809      	adds	r1, r1, r0
 8003362:	1850      	adds	r0, r2, r1
 8003364:	6011      	str	r1, [r2, #0]
 8003366:	4283      	cmp	r3, r0
 8003368:	d1e0      	bne.n	800332c <_free_r+0x24>
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	1841      	adds	r1, r0, r1
 8003370:	6011      	str	r1, [r2, #0]
 8003372:	6053      	str	r3, [r2, #4]
 8003374:	e7da      	b.n	800332c <_free_r+0x24>
 8003376:	42a0      	cmp	r0, r4
 8003378:	d902      	bls.n	8003380 <_free_r+0x78>
 800337a:	230c      	movs	r3, #12
 800337c:	602b      	str	r3, [r5, #0]
 800337e:	e7d5      	b.n	800332c <_free_r+0x24>
 8003380:	6820      	ldr	r0, [r4, #0]
 8003382:	1821      	adds	r1, r4, r0
 8003384:	428b      	cmp	r3, r1
 8003386:	d103      	bne.n	8003390 <_free_r+0x88>
 8003388:	6819      	ldr	r1, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	1809      	adds	r1, r1, r0
 800338e:	6021      	str	r1, [r4, #0]
 8003390:	6063      	str	r3, [r4, #4]
 8003392:	6054      	str	r4, [r2, #4]
 8003394:	e7ca      	b.n	800332c <_free_r+0x24>
 8003396:	46c0      	nop			@ (mov r8, r8)
 8003398:	2000024c 	.word	0x2000024c

0800339c <sbrk_aligned>:
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	4e0f      	ldr	r6, [pc, #60]	@ (80033dc <sbrk_aligned+0x40>)
 80033a0:	000d      	movs	r5, r1
 80033a2:	6831      	ldr	r1, [r6, #0]
 80033a4:	0004      	movs	r4, r0
 80033a6:	2900      	cmp	r1, #0
 80033a8:	d102      	bne.n	80033b0 <sbrk_aligned+0x14>
 80033aa:	f000 fb99 	bl	8003ae0 <_sbrk_r>
 80033ae:	6030      	str	r0, [r6, #0]
 80033b0:	0029      	movs	r1, r5
 80033b2:	0020      	movs	r0, r4
 80033b4:	f000 fb94 	bl	8003ae0 <_sbrk_r>
 80033b8:	1c43      	adds	r3, r0, #1
 80033ba:	d103      	bne.n	80033c4 <sbrk_aligned+0x28>
 80033bc:	2501      	movs	r5, #1
 80033be:	426d      	negs	r5, r5
 80033c0:	0028      	movs	r0, r5
 80033c2:	bd70      	pop	{r4, r5, r6, pc}
 80033c4:	2303      	movs	r3, #3
 80033c6:	1cc5      	adds	r5, r0, #3
 80033c8:	439d      	bics	r5, r3
 80033ca:	42a8      	cmp	r0, r5
 80033cc:	d0f8      	beq.n	80033c0 <sbrk_aligned+0x24>
 80033ce:	1a29      	subs	r1, r5, r0
 80033d0:	0020      	movs	r0, r4
 80033d2:	f000 fb85 	bl	8003ae0 <_sbrk_r>
 80033d6:	3001      	adds	r0, #1
 80033d8:	d1f2      	bne.n	80033c0 <sbrk_aligned+0x24>
 80033da:	e7ef      	b.n	80033bc <sbrk_aligned+0x20>
 80033dc:	20000248 	.word	0x20000248

080033e0 <_malloc_r>:
 80033e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033e2:	2203      	movs	r2, #3
 80033e4:	1ccb      	adds	r3, r1, #3
 80033e6:	4393      	bics	r3, r2
 80033e8:	3308      	adds	r3, #8
 80033ea:	0005      	movs	r5, r0
 80033ec:	001f      	movs	r7, r3
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d234      	bcs.n	800345c <_malloc_r+0x7c>
 80033f2:	270c      	movs	r7, #12
 80033f4:	42b9      	cmp	r1, r7
 80033f6:	d833      	bhi.n	8003460 <_malloc_r+0x80>
 80033f8:	0028      	movs	r0, r5
 80033fa:	f000 f871 	bl	80034e0 <__malloc_lock>
 80033fe:	4e37      	ldr	r6, [pc, #220]	@ (80034dc <_malloc_r+0xfc>)
 8003400:	6833      	ldr	r3, [r6, #0]
 8003402:	001c      	movs	r4, r3
 8003404:	2c00      	cmp	r4, #0
 8003406:	d12f      	bne.n	8003468 <_malloc_r+0x88>
 8003408:	0039      	movs	r1, r7
 800340a:	0028      	movs	r0, r5
 800340c:	f7ff ffc6 	bl	800339c <sbrk_aligned>
 8003410:	0004      	movs	r4, r0
 8003412:	1c43      	adds	r3, r0, #1
 8003414:	d15f      	bne.n	80034d6 <_malloc_r+0xf6>
 8003416:	6834      	ldr	r4, [r6, #0]
 8003418:	9400      	str	r4, [sp, #0]
 800341a:	9b00      	ldr	r3, [sp, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d14a      	bne.n	80034b6 <_malloc_r+0xd6>
 8003420:	2c00      	cmp	r4, #0
 8003422:	d052      	beq.n	80034ca <_malloc_r+0xea>
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	0028      	movs	r0, r5
 8003428:	18e3      	adds	r3, r4, r3
 800342a:	9900      	ldr	r1, [sp, #0]
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	f000 fb57 	bl	8003ae0 <_sbrk_r>
 8003432:	9b01      	ldr	r3, [sp, #4]
 8003434:	4283      	cmp	r3, r0
 8003436:	d148      	bne.n	80034ca <_malloc_r+0xea>
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	0028      	movs	r0, r5
 800343c:	1aff      	subs	r7, r7, r3
 800343e:	0039      	movs	r1, r7
 8003440:	f7ff ffac 	bl	800339c <sbrk_aligned>
 8003444:	3001      	adds	r0, #1
 8003446:	d040      	beq.n	80034ca <_malloc_r+0xea>
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	19db      	adds	r3, r3, r7
 800344c:	6023      	str	r3, [r4, #0]
 800344e:	6833      	ldr	r3, [r6, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	2a00      	cmp	r2, #0
 8003454:	d133      	bne.n	80034be <_malloc_r+0xde>
 8003456:	9b00      	ldr	r3, [sp, #0]
 8003458:	6033      	str	r3, [r6, #0]
 800345a:	e019      	b.n	8003490 <_malloc_r+0xb0>
 800345c:	2b00      	cmp	r3, #0
 800345e:	dac9      	bge.n	80033f4 <_malloc_r+0x14>
 8003460:	230c      	movs	r3, #12
 8003462:	602b      	str	r3, [r5, #0]
 8003464:	2000      	movs	r0, #0
 8003466:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003468:	6821      	ldr	r1, [r4, #0]
 800346a:	1bc9      	subs	r1, r1, r7
 800346c:	d420      	bmi.n	80034b0 <_malloc_r+0xd0>
 800346e:	290b      	cmp	r1, #11
 8003470:	d90a      	bls.n	8003488 <_malloc_r+0xa8>
 8003472:	19e2      	adds	r2, r4, r7
 8003474:	6027      	str	r7, [r4, #0]
 8003476:	42a3      	cmp	r3, r4
 8003478:	d104      	bne.n	8003484 <_malloc_r+0xa4>
 800347a:	6032      	str	r2, [r6, #0]
 800347c:	6863      	ldr	r3, [r4, #4]
 800347e:	6011      	str	r1, [r2, #0]
 8003480:	6053      	str	r3, [r2, #4]
 8003482:	e005      	b.n	8003490 <_malloc_r+0xb0>
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	e7f9      	b.n	800347c <_malloc_r+0x9c>
 8003488:	6862      	ldr	r2, [r4, #4]
 800348a:	42a3      	cmp	r3, r4
 800348c:	d10e      	bne.n	80034ac <_malloc_r+0xcc>
 800348e:	6032      	str	r2, [r6, #0]
 8003490:	0028      	movs	r0, r5
 8003492:	f000 f82d 	bl	80034f0 <__malloc_unlock>
 8003496:	0020      	movs	r0, r4
 8003498:	2207      	movs	r2, #7
 800349a:	300b      	adds	r0, #11
 800349c:	1d23      	adds	r3, r4, #4
 800349e:	4390      	bics	r0, r2
 80034a0:	1ac2      	subs	r2, r0, r3
 80034a2:	4298      	cmp	r0, r3
 80034a4:	d0df      	beq.n	8003466 <_malloc_r+0x86>
 80034a6:	1a1b      	subs	r3, r3, r0
 80034a8:	50a3      	str	r3, [r4, r2]
 80034aa:	e7dc      	b.n	8003466 <_malloc_r+0x86>
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	e7ef      	b.n	8003490 <_malloc_r+0xb0>
 80034b0:	0023      	movs	r3, r4
 80034b2:	6864      	ldr	r4, [r4, #4]
 80034b4:	e7a6      	b.n	8003404 <_malloc_r+0x24>
 80034b6:	9c00      	ldr	r4, [sp, #0]
 80034b8:	6863      	ldr	r3, [r4, #4]
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	e7ad      	b.n	800341a <_malloc_r+0x3a>
 80034be:	001a      	movs	r2, r3
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	42a3      	cmp	r3, r4
 80034c4:	d1fb      	bne.n	80034be <_malloc_r+0xde>
 80034c6:	2300      	movs	r3, #0
 80034c8:	e7da      	b.n	8003480 <_malloc_r+0xa0>
 80034ca:	230c      	movs	r3, #12
 80034cc:	0028      	movs	r0, r5
 80034ce:	602b      	str	r3, [r5, #0]
 80034d0:	f000 f80e 	bl	80034f0 <__malloc_unlock>
 80034d4:	e7c6      	b.n	8003464 <_malloc_r+0x84>
 80034d6:	6007      	str	r7, [r0, #0]
 80034d8:	e7da      	b.n	8003490 <_malloc_r+0xb0>
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	2000024c 	.word	0x2000024c

080034e0 <__malloc_lock>:
 80034e0:	b510      	push	{r4, lr}
 80034e2:	4802      	ldr	r0, [pc, #8]	@ (80034ec <__malloc_lock+0xc>)
 80034e4:	f7ff ff0e 	bl	8003304 <__retarget_lock_acquire_recursive>
 80034e8:	bd10      	pop	{r4, pc}
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	20000244 	.word	0x20000244

080034f0 <__malloc_unlock>:
 80034f0:	b510      	push	{r4, lr}
 80034f2:	4802      	ldr	r0, [pc, #8]	@ (80034fc <__malloc_unlock+0xc>)
 80034f4:	f7ff ff07 	bl	8003306 <__retarget_lock_release_recursive>
 80034f8:	bd10      	pop	{r4, pc}
 80034fa:	46c0      	nop			@ (mov r8, r8)
 80034fc:	20000244 	.word	0x20000244

08003500 <__ssputs_r>:
 8003500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003502:	688e      	ldr	r6, [r1, #8]
 8003504:	b085      	sub	sp, #20
 8003506:	001f      	movs	r7, r3
 8003508:	000c      	movs	r4, r1
 800350a:	680b      	ldr	r3, [r1, #0]
 800350c:	9002      	str	r0, [sp, #8]
 800350e:	9203      	str	r2, [sp, #12]
 8003510:	42be      	cmp	r6, r7
 8003512:	d830      	bhi.n	8003576 <__ssputs_r+0x76>
 8003514:	210c      	movs	r1, #12
 8003516:	5e62      	ldrsh	r2, [r4, r1]
 8003518:	2190      	movs	r1, #144	@ 0x90
 800351a:	00c9      	lsls	r1, r1, #3
 800351c:	420a      	tst	r2, r1
 800351e:	d028      	beq.n	8003572 <__ssputs_r+0x72>
 8003520:	2003      	movs	r0, #3
 8003522:	6921      	ldr	r1, [r4, #16]
 8003524:	1a5b      	subs	r3, r3, r1
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	6963      	ldr	r3, [r4, #20]
 800352a:	4343      	muls	r3, r0
 800352c:	9801      	ldr	r0, [sp, #4]
 800352e:	0fdd      	lsrs	r5, r3, #31
 8003530:	18ed      	adds	r5, r5, r3
 8003532:	1c7b      	adds	r3, r7, #1
 8003534:	181b      	adds	r3, r3, r0
 8003536:	106d      	asrs	r5, r5, #1
 8003538:	42ab      	cmp	r3, r5
 800353a:	d900      	bls.n	800353e <__ssputs_r+0x3e>
 800353c:	001d      	movs	r5, r3
 800353e:	0552      	lsls	r2, r2, #21
 8003540:	d528      	bpl.n	8003594 <__ssputs_r+0x94>
 8003542:	0029      	movs	r1, r5
 8003544:	9802      	ldr	r0, [sp, #8]
 8003546:	f7ff ff4b 	bl	80033e0 <_malloc_r>
 800354a:	1e06      	subs	r6, r0, #0
 800354c:	d02c      	beq.n	80035a8 <__ssputs_r+0xa8>
 800354e:	9a01      	ldr	r2, [sp, #4]
 8003550:	6921      	ldr	r1, [r4, #16]
 8003552:	f000 fae2 	bl	8003b1a <memcpy>
 8003556:	89a2      	ldrh	r2, [r4, #12]
 8003558:	4b18      	ldr	r3, [pc, #96]	@ (80035bc <__ssputs_r+0xbc>)
 800355a:	401a      	ands	r2, r3
 800355c:	2380      	movs	r3, #128	@ 0x80
 800355e:	4313      	orrs	r3, r2
 8003560:	81a3      	strh	r3, [r4, #12]
 8003562:	9b01      	ldr	r3, [sp, #4]
 8003564:	6126      	str	r6, [r4, #16]
 8003566:	18f6      	adds	r6, r6, r3
 8003568:	6026      	str	r6, [r4, #0]
 800356a:	003e      	movs	r6, r7
 800356c:	6165      	str	r5, [r4, #20]
 800356e:	1aed      	subs	r5, r5, r3
 8003570:	60a5      	str	r5, [r4, #8]
 8003572:	42be      	cmp	r6, r7
 8003574:	d900      	bls.n	8003578 <__ssputs_r+0x78>
 8003576:	003e      	movs	r6, r7
 8003578:	0032      	movs	r2, r6
 800357a:	9903      	ldr	r1, [sp, #12]
 800357c:	6820      	ldr	r0, [r4, #0]
 800357e:	f000 fa9b 	bl	8003ab8 <memmove>
 8003582:	2000      	movs	r0, #0
 8003584:	68a3      	ldr	r3, [r4, #8]
 8003586:	1b9b      	subs	r3, r3, r6
 8003588:	60a3      	str	r3, [r4, #8]
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	199b      	adds	r3, r3, r6
 800358e:	6023      	str	r3, [r4, #0]
 8003590:	b005      	add	sp, #20
 8003592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003594:	002a      	movs	r2, r5
 8003596:	9802      	ldr	r0, [sp, #8]
 8003598:	f000 fac8 	bl	8003b2c <_realloc_r>
 800359c:	1e06      	subs	r6, r0, #0
 800359e:	d1e0      	bne.n	8003562 <__ssputs_r+0x62>
 80035a0:	6921      	ldr	r1, [r4, #16]
 80035a2:	9802      	ldr	r0, [sp, #8]
 80035a4:	f7ff feb0 	bl	8003308 <_free_r>
 80035a8:	230c      	movs	r3, #12
 80035aa:	2001      	movs	r0, #1
 80035ac:	9a02      	ldr	r2, [sp, #8]
 80035ae:	4240      	negs	r0, r0
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	89a2      	ldrh	r2, [r4, #12]
 80035b4:	3334      	adds	r3, #52	@ 0x34
 80035b6:	4313      	orrs	r3, r2
 80035b8:	81a3      	strh	r3, [r4, #12]
 80035ba:	e7e9      	b.n	8003590 <__ssputs_r+0x90>
 80035bc:	fffffb7f 	.word	0xfffffb7f

080035c0 <_svfiprintf_r>:
 80035c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c2:	b0a1      	sub	sp, #132	@ 0x84
 80035c4:	9003      	str	r0, [sp, #12]
 80035c6:	001d      	movs	r5, r3
 80035c8:	898b      	ldrh	r3, [r1, #12]
 80035ca:	000f      	movs	r7, r1
 80035cc:	0016      	movs	r6, r2
 80035ce:	061b      	lsls	r3, r3, #24
 80035d0:	d511      	bpl.n	80035f6 <_svfiprintf_r+0x36>
 80035d2:	690b      	ldr	r3, [r1, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10e      	bne.n	80035f6 <_svfiprintf_r+0x36>
 80035d8:	2140      	movs	r1, #64	@ 0x40
 80035da:	f7ff ff01 	bl	80033e0 <_malloc_r>
 80035de:	6038      	str	r0, [r7, #0]
 80035e0:	6138      	str	r0, [r7, #16]
 80035e2:	2800      	cmp	r0, #0
 80035e4:	d105      	bne.n	80035f2 <_svfiprintf_r+0x32>
 80035e6:	230c      	movs	r3, #12
 80035e8:	9a03      	ldr	r2, [sp, #12]
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	2001      	movs	r0, #1
 80035ee:	4240      	negs	r0, r0
 80035f0:	e0cf      	b.n	8003792 <_svfiprintf_r+0x1d2>
 80035f2:	2340      	movs	r3, #64	@ 0x40
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	2300      	movs	r3, #0
 80035f8:	ac08      	add	r4, sp, #32
 80035fa:	6163      	str	r3, [r4, #20]
 80035fc:	3320      	adds	r3, #32
 80035fe:	7663      	strb	r3, [r4, #25]
 8003600:	3310      	adds	r3, #16
 8003602:	76a3      	strb	r3, [r4, #26]
 8003604:	9507      	str	r5, [sp, #28]
 8003606:	0035      	movs	r5, r6
 8003608:	782b      	ldrb	r3, [r5, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <_svfiprintf_r+0x52>
 800360e:	2b25      	cmp	r3, #37	@ 0x25
 8003610:	d148      	bne.n	80036a4 <_svfiprintf_r+0xe4>
 8003612:	1bab      	subs	r3, r5, r6
 8003614:	9305      	str	r3, [sp, #20]
 8003616:	42b5      	cmp	r5, r6
 8003618:	d00b      	beq.n	8003632 <_svfiprintf_r+0x72>
 800361a:	0032      	movs	r2, r6
 800361c:	0039      	movs	r1, r7
 800361e:	9803      	ldr	r0, [sp, #12]
 8003620:	f7ff ff6e 	bl	8003500 <__ssputs_r>
 8003624:	3001      	adds	r0, #1
 8003626:	d100      	bne.n	800362a <_svfiprintf_r+0x6a>
 8003628:	e0ae      	b.n	8003788 <_svfiprintf_r+0x1c8>
 800362a:	6963      	ldr	r3, [r4, #20]
 800362c:	9a05      	ldr	r2, [sp, #20]
 800362e:	189b      	adds	r3, r3, r2
 8003630:	6163      	str	r3, [r4, #20]
 8003632:	782b      	ldrb	r3, [r5, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d100      	bne.n	800363a <_svfiprintf_r+0x7a>
 8003638:	e0a6      	b.n	8003788 <_svfiprintf_r+0x1c8>
 800363a:	2201      	movs	r2, #1
 800363c:	2300      	movs	r3, #0
 800363e:	4252      	negs	r2, r2
 8003640:	6062      	str	r2, [r4, #4]
 8003642:	a904      	add	r1, sp, #16
 8003644:	3254      	adds	r2, #84	@ 0x54
 8003646:	1852      	adds	r2, r2, r1
 8003648:	1c6e      	adds	r6, r5, #1
 800364a:	6023      	str	r3, [r4, #0]
 800364c:	60e3      	str	r3, [r4, #12]
 800364e:	60a3      	str	r3, [r4, #8]
 8003650:	7013      	strb	r3, [r2, #0]
 8003652:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003654:	4b54      	ldr	r3, [pc, #336]	@ (80037a8 <_svfiprintf_r+0x1e8>)
 8003656:	2205      	movs	r2, #5
 8003658:	0018      	movs	r0, r3
 800365a:	7831      	ldrb	r1, [r6, #0]
 800365c:	9305      	str	r3, [sp, #20]
 800365e:	f000 fa51 	bl	8003b04 <memchr>
 8003662:	1c75      	adds	r5, r6, #1
 8003664:	2800      	cmp	r0, #0
 8003666:	d11f      	bne.n	80036a8 <_svfiprintf_r+0xe8>
 8003668:	6822      	ldr	r2, [r4, #0]
 800366a:	06d3      	lsls	r3, r2, #27
 800366c:	d504      	bpl.n	8003678 <_svfiprintf_r+0xb8>
 800366e:	2353      	movs	r3, #83	@ 0x53
 8003670:	a904      	add	r1, sp, #16
 8003672:	185b      	adds	r3, r3, r1
 8003674:	2120      	movs	r1, #32
 8003676:	7019      	strb	r1, [r3, #0]
 8003678:	0713      	lsls	r3, r2, #28
 800367a:	d504      	bpl.n	8003686 <_svfiprintf_r+0xc6>
 800367c:	2353      	movs	r3, #83	@ 0x53
 800367e:	a904      	add	r1, sp, #16
 8003680:	185b      	adds	r3, r3, r1
 8003682:	212b      	movs	r1, #43	@ 0x2b
 8003684:	7019      	strb	r1, [r3, #0]
 8003686:	7833      	ldrb	r3, [r6, #0]
 8003688:	2b2a      	cmp	r3, #42	@ 0x2a
 800368a:	d016      	beq.n	80036ba <_svfiprintf_r+0xfa>
 800368c:	0035      	movs	r5, r6
 800368e:	2100      	movs	r1, #0
 8003690:	200a      	movs	r0, #10
 8003692:	68e3      	ldr	r3, [r4, #12]
 8003694:	782a      	ldrb	r2, [r5, #0]
 8003696:	1c6e      	adds	r6, r5, #1
 8003698:	3a30      	subs	r2, #48	@ 0x30
 800369a:	2a09      	cmp	r2, #9
 800369c:	d950      	bls.n	8003740 <_svfiprintf_r+0x180>
 800369e:	2900      	cmp	r1, #0
 80036a0:	d111      	bne.n	80036c6 <_svfiprintf_r+0x106>
 80036a2:	e017      	b.n	80036d4 <_svfiprintf_r+0x114>
 80036a4:	3501      	adds	r5, #1
 80036a6:	e7af      	b.n	8003608 <_svfiprintf_r+0x48>
 80036a8:	9b05      	ldr	r3, [sp, #20]
 80036aa:	6822      	ldr	r2, [r4, #0]
 80036ac:	1ac0      	subs	r0, r0, r3
 80036ae:	2301      	movs	r3, #1
 80036b0:	4083      	lsls	r3, r0
 80036b2:	4313      	orrs	r3, r2
 80036b4:	002e      	movs	r6, r5
 80036b6:	6023      	str	r3, [r4, #0]
 80036b8:	e7cc      	b.n	8003654 <_svfiprintf_r+0x94>
 80036ba:	9b07      	ldr	r3, [sp, #28]
 80036bc:	1d19      	adds	r1, r3, #4
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	9107      	str	r1, [sp, #28]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	db01      	blt.n	80036ca <_svfiprintf_r+0x10a>
 80036c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80036c8:	e004      	b.n	80036d4 <_svfiprintf_r+0x114>
 80036ca:	425b      	negs	r3, r3
 80036cc:	60e3      	str	r3, [r4, #12]
 80036ce:	2302      	movs	r3, #2
 80036d0:	4313      	orrs	r3, r2
 80036d2:	6023      	str	r3, [r4, #0]
 80036d4:	782b      	ldrb	r3, [r5, #0]
 80036d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80036d8:	d10c      	bne.n	80036f4 <_svfiprintf_r+0x134>
 80036da:	786b      	ldrb	r3, [r5, #1]
 80036dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80036de:	d134      	bne.n	800374a <_svfiprintf_r+0x18a>
 80036e0:	9b07      	ldr	r3, [sp, #28]
 80036e2:	3502      	adds	r5, #2
 80036e4:	1d1a      	adds	r2, r3, #4
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	9207      	str	r2, [sp, #28]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	da01      	bge.n	80036f2 <_svfiprintf_r+0x132>
 80036ee:	2301      	movs	r3, #1
 80036f0:	425b      	negs	r3, r3
 80036f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80036f4:	4e2d      	ldr	r6, [pc, #180]	@ (80037ac <_svfiprintf_r+0x1ec>)
 80036f6:	2203      	movs	r2, #3
 80036f8:	0030      	movs	r0, r6
 80036fa:	7829      	ldrb	r1, [r5, #0]
 80036fc:	f000 fa02 	bl	8003b04 <memchr>
 8003700:	2800      	cmp	r0, #0
 8003702:	d006      	beq.n	8003712 <_svfiprintf_r+0x152>
 8003704:	2340      	movs	r3, #64	@ 0x40
 8003706:	1b80      	subs	r0, r0, r6
 8003708:	4083      	lsls	r3, r0
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	3501      	adds	r5, #1
 800370e:	4313      	orrs	r3, r2
 8003710:	6023      	str	r3, [r4, #0]
 8003712:	7829      	ldrb	r1, [r5, #0]
 8003714:	2206      	movs	r2, #6
 8003716:	4826      	ldr	r0, [pc, #152]	@ (80037b0 <_svfiprintf_r+0x1f0>)
 8003718:	1c6e      	adds	r6, r5, #1
 800371a:	7621      	strb	r1, [r4, #24]
 800371c:	f000 f9f2 	bl	8003b04 <memchr>
 8003720:	2800      	cmp	r0, #0
 8003722:	d038      	beq.n	8003796 <_svfiprintf_r+0x1d6>
 8003724:	4b23      	ldr	r3, [pc, #140]	@ (80037b4 <_svfiprintf_r+0x1f4>)
 8003726:	2b00      	cmp	r3, #0
 8003728:	d122      	bne.n	8003770 <_svfiprintf_r+0x1b0>
 800372a:	2207      	movs	r2, #7
 800372c:	9b07      	ldr	r3, [sp, #28]
 800372e:	3307      	adds	r3, #7
 8003730:	4393      	bics	r3, r2
 8003732:	3308      	adds	r3, #8
 8003734:	9307      	str	r3, [sp, #28]
 8003736:	6963      	ldr	r3, [r4, #20]
 8003738:	9a04      	ldr	r2, [sp, #16]
 800373a:	189b      	adds	r3, r3, r2
 800373c:	6163      	str	r3, [r4, #20]
 800373e:	e762      	b.n	8003606 <_svfiprintf_r+0x46>
 8003740:	4343      	muls	r3, r0
 8003742:	0035      	movs	r5, r6
 8003744:	2101      	movs	r1, #1
 8003746:	189b      	adds	r3, r3, r2
 8003748:	e7a4      	b.n	8003694 <_svfiprintf_r+0xd4>
 800374a:	2300      	movs	r3, #0
 800374c:	200a      	movs	r0, #10
 800374e:	0019      	movs	r1, r3
 8003750:	3501      	adds	r5, #1
 8003752:	6063      	str	r3, [r4, #4]
 8003754:	782a      	ldrb	r2, [r5, #0]
 8003756:	1c6e      	adds	r6, r5, #1
 8003758:	3a30      	subs	r2, #48	@ 0x30
 800375a:	2a09      	cmp	r2, #9
 800375c:	d903      	bls.n	8003766 <_svfiprintf_r+0x1a6>
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0c8      	beq.n	80036f4 <_svfiprintf_r+0x134>
 8003762:	9109      	str	r1, [sp, #36]	@ 0x24
 8003764:	e7c6      	b.n	80036f4 <_svfiprintf_r+0x134>
 8003766:	4341      	muls	r1, r0
 8003768:	0035      	movs	r5, r6
 800376a:	2301      	movs	r3, #1
 800376c:	1889      	adds	r1, r1, r2
 800376e:	e7f1      	b.n	8003754 <_svfiprintf_r+0x194>
 8003770:	aa07      	add	r2, sp, #28
 8003772:	9200      	str	r2, [sp, #0]
 8003774:	0021      	movs	r1, r4
 8003776:	003a      	movs	r2, r7
 8003778:	4b0f      	ldr	r3, [pc, #60]	@ (80037b8 <_svfiprintf_r+0x1f8>)
 800377a:	9803      	ldr	r0, [sp, #12]
 800377c:	e000      	b.n	8003780 <_svfiprintf_r+0x1c0>
 800377e:	bf00      	nop
 8003780:	9004      	str	r0, [sp, #16]
 8003782:	9b04      	ldr	r3, [sp, #16]
 8003784:	3301      	adds	r3, #1
 8003786:	d1d6      	bne.n	8003736 <_svfiprintf_r+0x176>
 8003788:	89bb      	ldrh	r3, [r7, #12]
 800378a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800378c:	065b      	lsls	r3, r3, #25
 800378e:	d500      	bpl.n	8003792 <_svfiprintf_r+0x1d2>
 8003790:	e72c      	b.n	80035ec <_svfiprintf_r+0x2c>
 8003792:	b021      	add	sp, #132	@ 0x84
 8003794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003796:	aa07      	add	r2, sp, #28
 8003798:	9200      	str	r2, [sp, #0]
 800379a:	0021      	movs	r1, r4
 800379c:	003a      	movs	r2, r7
 800379e:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <_svfiprintf_r+0x1f8>)
 80037a0:	9803      	ldr	r0, [sp, #12]
 80037a2:	f000 f87b 	bl	800389c <_printf_i>
 80037a6:	e7eb      	b.n	8003780 <_svfiprintf_r+0x1c0>
 80037a8:	08003cc0 	.word	0x08003cc0
 80037ac:	08003cc6 	.word	0x08003cc6
 80037b0:	08003cca 	.word	0x08003cca
 80037b4:	00000000 	.word	0x00000000
 80037b8:	08003501 	.word	0x08003501

080037bc <_printf_common>:
 80037bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037be:	0016      	movs	r6, r2
 80037c0:	9301      	str	r3, [sp, #4]
 80037c2:	688a      	ldr	r2, [r1, #8]
 80037c4:	690b      	ldr	r3, [r1, #16]
 80037c6:	000c      	movs	r4, r1
 80037c8:	9000      	str	r0, [sp, #0]
 80037ca:	4293      	cmp	r3, r2
 80037cc:	da00      	bge.n	80037d0 <_printf_common+0x14>
 80037ce:	0013      	movs	r3, r2
 80037d0:	0022      	movs	r2, r4
 80037d2:	6033      	str	r3, [r6, #0]
 80037d4:	3243      	adds	r2, #67	@ 0x43
 80037d6:	7812      	ldrb	r2, [r2, #0]
 80037d8:	2a00      	cmp	r2, #0
 80037da:	d001      	beq.n	80037e0 <_printf_common+0x24>
 80037dc:	3301      	adds	r3, #1
 80037de:	6033      	str	r3, [r6, #0]
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	069b      	lsls	r3, r3, #26
 80037e4:	d502      	bpl.n	80037ec <_printf_common+0x30>
 80037e6:	6833      	ldr	r3, [r6, #0]
 80037e8:	3302      	adds	r3, #2
 80037ea:	6033      	str	r3, [r6, #0]
 80037ec:	6822      	ldr	r2, [r4, #0]
 80037ee:	2306      	movs	r3, #6
 80037f0:	0015      	movs	r5, r2
 80037f2:	401d      	ands	r5, r3
 80037f4:	421a      	tst	r2, r3
 80037f6:	d027      	beq.n	8003848 <_printf_common+0x8c>
 80037f8:	0023      	movs	r3, r4
 80037fa:	3343      	adds	r3, #67	@ 0x43
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	1e5a      	subs	r2, r3, #1
 8003800:	4193      	sbcs	r3, r2
 8003802:	6822      	ldr	r2, [r4, #0]
 8003804:	0692      	lsls	r2, r2, #26
 8003806:	d430      	bmi.n	800386a <_printf_common+0xae>
 8003808:	0022      	movs	r2, r4
 800380a:	9901      	ldr	r1, [sp, #4]
 800380c:	9800      	ldr	r0, [sp, #0]
 800380e:	9d08      	ldr	r5, [sp, #32]
 8003810:	3243      	adds	r2, #67	@ 0x43
 8003812:	47a8      	blx	r5
 8003814:	3001      	adds	r0, #1
 8003816:	d025      	beq.n	8003864 <_printf_common+0xa8>
 8003818:	2206      	movs	r2, #6
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	2500      	movs	r5, #0
 800381e:	4013      	ands	r3, r2
 8003820:	2b04      	cmp	r3, #4
 8003822:	d105      	bne.n	8003830 <_printf_common+0x74>
 8003824:	6833      	ldr	r3, [r6, #0]
 8003826:	68e5      	ldr	r5, [r4, #12]
 8003828:	1aed      	subs	r5, r5, r3
 800382a:	43eb      	mvns	r3, r5
 800382c:	17db      	asrs	r3, r3, #31
 800382e:	401d      	ands	r5, r3
 8003830:	68a3      	ldr	r3, [r4, #8]
 8003832:	6922      	ldr	r2, [r4, #16]
 8003834:	4293      	cmp	r3, r2
 8003836:	dd01      	ble.n	800383c <_printf_common+0x80>
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	18ed      	adds	r5, r5, r3
 800383c:	2600      	movs	r6, #0
 800383e:	42b5      	cmp	r5, r6
 8003840:	d120      	bne.n	8003884 <_printf_common+0xc8>
 8003842:	2000      	movs	r0, #0
 8003844:	e010      	b.n	8003868 <_printf_common+0xac>
 8003846:	3501      	adds	r5, #1
 8003848:	68e3      	ldr	r3, [r4, #12]
 800384a:	6832      	ldr	r2, [r6, #0]
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	42ab      	cmp	r3, r5
 8003850:	ddd2      	ble.n	80037f8 <_printf_common+0x3c>
 8003852:	0022      	movs	r2, r4
 8003854:	2301      	movs	r3, #1
 8003856:	9901      	ldr	r1, [sp, #4]
 8003858:	9800      	ldr	r0, [sp, #0]
 800385a:	9f08      	ldr	r7, [sp, #32]
 800385c:	3219      	adds	r2, #25
 800385e:	47b8      	blx	r7
 8003860:	3001      	adds	r0, #1
 8003862:	d1f0      	bne.n	8003846 <_printf_common+0x8a>
 8003864:	2001      	movs	r0, #1
 8003866:	4240      	negs	r0, r0
 8003868:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800386a:	2030      	movs	r0, #48	@ 0x30
 800386c:	18e1      	adds	r1, r4, r3
 800386e:	3143      	adds	r1, #67	@ 0x43
 8003870:	7008      	strb	r0, [r1, #0]
 8003872:	0021      	movs	r1, r4
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	3145      	adds	r1, #69	@ 0x45
 8003878:	7809      	ldrb	r1, [r1, #0]
 800387a:	18a2      	adds	r2, r4, r2
 800387c:	3243      	adds	r2, #67	@ 0x43
 800387e:	3302      	adds	r3, #2
 8003880:	7011      	strb	r1, [r2, #0]
 8003882:	e7c1      	b.n	8003808 <_printf_common+0x4c>
 8003884:	0022      	movs	r2, r4
 8003886:	2301      	movs	r3, #1
 8003888:	9901      	ldr	r1, [sp, #4]
 800388a:	9800      	ldr	r0, [sp, #0]
 800388c:	9f08      	ldr	r7, [sp, #32]
 800388e:	321a      	adds	r2, #26
 8003890:	47b8      	blx	r7
 8003892:	3001      	adds	r0, #1
 8003894:	d0e6      	beq.n	8003864 <_printf_common+0xa8>
 8003896:	3601      	adds	r6, #1
 8003898:	e7d1      	b.n	800383e <_printf_common+0x82>
	...

0800389c <_printf_i>:
 800389c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800389e:	b08b      	sub	sp, #44	@ 0x2c
 80038a0:	9206      	str	r2, [sp, #24]
 80038a2:	000a      	movs	r2, r1
 80038a4:	3243      	adds	r2, #67	@ 0x43
 80038a6:	9307      	str	r3, [sp, #28]
 80038a8:	9005      	str	r0, [sp, #20]
 80038aa:	9203      	str	r2, [sp, #12]
 80038ac:	7e0a      	ldrb	r2, [r1, #24]
 80038ae:	000c      	movs	r4, r1
 80038b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80038b2:	2a78      	cmp	r2, #120	@ 0x78
 80038b4:	d809      	bhi.n	80038ca <_printf_i+0x2e>
 80038b6:	2a62      	cmp	r2, #98	@ 0x62
 80038b8:	d80b      	bhi.n	80038d2 <_printf_i+0x36>
 80038ba:	2a00      	cmp	r2, #0
 80038bc:	d100      	bne.n	80038c0 <_printf_i+0x24>
 80038be:	e0bc      	b.n	8003a3a <_printf_i+0x19e>
 80038c0:	497b      	ldr	r1, [pc, #492]	@ (8003ab0 <_printf_i+0x214>)
 80038c2:	9104      	str	r1, [sp, #16]
 80038c4:	2a58      	cmp	r2, #88	@ 0x58
 80038c6:	d100      	bne.n	80038ca <_printf_i+0x2e>
 80038c8:	e090      	b.n	80039ec <_printf_i+0x150>
 80038ca:	0025      	movs	r5, r4
 80038cc:	3542      	adds	r5, #66	@ 0x42
 80038ce:	702a      	strb	r2, [r5, #0]
 80038d0:	e022      	b.n	8003918 <_printf_i+0x7c>
 80038d2:	0010      	movs	r0, r2
 80038d4:	3863      	subs	r0, #99	@ 0x63
 80038d6:	2815      	cmp	r0, #21
 80038d8:	d8f7      	bhi.n	80038ca <_printf_i+0x2e>
 80038da:	f7fc fc11 	bl	8000100 <__gnu_thumb1_case_shi>
 80038de:	0016      	.short	0x0016
 80038e0:	fff6001f 	.word	0xfff6001f
 80038e4:	fff6fff6 	.word	0xfff6fff6
 80038e8:	001ffff6 	.word	0x001ffff6
 80038ec:	fff6fff6 	.word	0xfff6fff6
 80038f0:	fff6fff6 	.word	0xfff6fff6
 80038f4:	003600a1 	.word	0x003600a1
 80038f8:	fff60080 	.word	0xfff60080
 80038fc:	00b2fff6 	.word	0x00b2fff6
 8003900:	0036fff6 	.word	0x0036fff6
 8003904:	fff6fff6 	.word	0xfff6fff6
 8003908:	0084      	.short	0x0084
 800390a:	0025      	movs	r5, r4
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	3542      	adds	r5, #66	@ 0x42
 8003910:	1d11      	adds	r1, r2, #4
 8003912:	6019      	str	r1, [r3, #0]
 8003914:	6813      	ldr	r3, [r2, #0]
 8003916:	702b      	strb	r3, [r5, #0]
 8003918:	2301      	movs	r3, #1
 800391a:	e0a0      	b.n	8003a5e <_printf_i+0x1c2>
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	6809      	ldr	r1, [r1, #0]
 8003920:	1d02      	adds	r2, r0, #4
 8003922:	060d      	lsls	r5, r1, #24
 8003924:	d50b      	bpl.n	800393e <_printf_i+0xa2>
 8003926:	6806      	ldr	r6, [r0, #0]
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	2e00      	cmp	r6, #0
 800392c:	da03      	bge.n	8003936 <_printf_i+0x9a>
 800392e:	232d      	movs	r3, #45	@ 0x2d
 8003930:	9a03      	ldr	r2, [sp, #12]
 8003932:	4276      	negs	r6, r6
 8003934:	7013      	strb	r3, [r2, #0]
 8003936:	4b5e      	ldr	r3, [pc, #376]	@ (8003ab0 <_printf_i+0x214>)
 8003938:	270a      	movs	r7, #10
 800393a:	9304      	str	r3, [sp, #16]
 800393c:	e018      	b.n	8003970 <_printf_i+0xd4>
 800393e:	6806      	ldr	r6, [r0, #0]
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	0649      	lsls	r1, r1, #25
 8003944:	d5f1      	bpl.n	800392a <_printf_i+0x8e>
 8003946:	b236      	sxth	r6, r6
 8003948:	e7ef      	b.n	800392a <_printf_i+0x8e>
 800394a:	6808      	ldr	r0, [r1, #0]
 800394c:	6819      	ldr	r1, [r3, #0]
 800394e:	c940      	ldmia	r1!, {r6}
 8003950:	0605      	lsls	r5, r0, #24
 8003952:	d402      	bmi.n	800395a <_printf_i+0xbe>
 8003954:	0640      	lsls	r0, r0, #25
 8003956:	d500      	bpl.n	800395a <_printf_i+0xbe>
 8003958:	b2b6      	uxth	r6, r6
 800395a:	6019      	str	r1, [r3, #0]
 800395c:	4b54      	ldr	r3, [pc, #336]	@ (8003ab0 <_printf_i+0x214>)
 800395e:	270a      	movs	r7, #10
 8003960:	9304      	str	r3, [sp, #16]
 8003962:	2a6f      	cmp	r2, #111	@ 0x6f
 8003964:	d100      	bne.n	8003968 <_printf_i+0xcc>
 8003966:	3f02      	subs	r7, #2
 8003968:	0023      	movs	r3, r4
 800396a:	2200      	movs	r2, #0
 800396c:	3343      	adds	r3, #67	@ 0x43
 800396e:	701a      	strb	r2, [r3, #0]
 8003970:	6863      	ldr	r3, [r4, #4]
 8003972:	60a3      	str	r3, [r4, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	db03      	blt.n	8003980 <_printf_i+0xe4>
 8003978:	2104      	movs	r1, #4
 800397a:	6822      	ldr	r2, [r4, #0]
 800397c:	438a      	bics	r2, r1
 800397e:	6022      	str	r2, [r4, #0]
 8003980:	2e00      	cmp	r6, #0
 8003982:	d102      	bne.n	800398a <_printf_i+0xee>
 8003984:	9d03      	ldr	r5, [sp, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00c      	beq.n	80039a4 <_printf_i+0x108>
 800398a:	9d03      	ldr	r5, [sp, #12]
 800398c:	0030      	movs	r0, r6
 800398e:	0039      	movs	r1, r7
 8003990:	f7fc fc46 	bl	8000220 <__aeabi_uidivmod>
 8003994:	9b04      	ldr	r3, [sp, #16]
 8003996:	3d01      	subs	r5, #1
 8003998:	5c5b      	ldrb	r3, [r3, r1]
 800399a:	702b      	strb	r3, [r5, #0]
 800399c:	0033      	movs	r3, r6
 800399e:	0006      	movs	r6, r0
 80039a0:	429f      	cmp	r7, r3
 80039a2:	d9f3      	bls.n	800398c <_printf_i+0xf0>
 80039a4:	2f08      	cmp	r7, #8
 80039a6:	d109      	bne.n	80039bc <_printf_i+0x120>
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	07db      	lsls	r3, r3, #31
 80039ac:	d506      	bpl.n	80039bc <_printf_i+0x120>
 80039ae:	6862      	ldr	r2, [r4, #4]
 80039b0:	6923      	ldr	r3, [r4, #16]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	dc02      	bgt.n	80039bc <_printf_i+0x120>
 80039b6:	2330      	movs	r3, #48	@ 0x30
 80039b8:	3d01      	subs	r5, #1
 80039ba:	702b      	strb	r3, [r5, #0]
 80039bc:	9b03      	ldr	r3, [sp, #12]
 80039be:	1b5b      	subs	r3, r3, r5
 80039c0:	6123      	str	r3, [r4, #16]
 80039c2:	9b07      	ldr	r3, [sp, #28]
 80039c4:	0021      	movs	r1, r4
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	9805      	ldr	r0, [sp, #20]
 80039ca:	9b06      	ldr	r3, [sp, #24]
 80039cc:	aa09      	add	r2, sp, #36	@ 0x24
 80039ce:	f7ff fef5 	bl	80037bc <_printf_common>
 80039d2:	3001      	adds	r0, #1
 80039d4:	d148      	bne.n	8003a68 <_printf_i+0x1cc>
 80039d6:	2001      	movs	r0, #1
 80039d8:	4240      	negs	r0, r0
 80039da:	b00b      	add	sp, #44	@ 0x2c
 80039dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039de:	2220      	movs	r2, #32
 80039e0:	6809      	ldr	r1, [r1, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	6022      	str	r2, [r4, #0]
 80039e6:	2278      	movs	r2, #120	@ 0x78
 80039e8:	4932      	ldr	r1, [pc, #200]	@ (8003ab4 <_printf_i+0x218>)
 80039ea:	9104      	str	r1, [sp, #16]
 80039ec:	0021      	movs	r1, r4
 80039ee:	3145      	adds	r1, #69	@ 0x45
 80039f0:	700a      	strb	r2, [r1, #0]
 80039f2:	6819      	ldr	r1, [r3, #0]
 80039f4:	6822      	ldr	r2, [r4, #0]
 80039f6:	c940      	ldmia	r1!, {r6}
 80039f8:	0610      	lsls	r0, r2, #24
 80039fa:	d402      	bmi.n	8003a02 <_printf_i+0x166>
 80039fc:	0650      	lsls	r0, r2, #25
 80039fe:	d500      	bpl.n	8003a02 <_printf_i+0x166>
 8003a00:	b2b6      	uxth	r6, r6
 8003a02:	6019      	str	r1, [r3, #0]
 8003a04:	07d3      	lsls	r3, r2, #31
 8003a06:	d502      	bpl.n	8003a0e <_printf_i+0x172>
 8003a08:	2320      	movs	r3, #32
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	6023      	str	r3, [r4, #0]
 8003a0e:	2e00      	cmp	r6, #0
 8003a10:	d001      	beq.n	8003a16 <_printf_i+0x17a>
 8003a12:	2710      	movs	r7, #16
 8003a14:	e7a8      	b.n	8003968 <_printf_i+0xcc>
 8003a16:	2220      	movs	r2, #32
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	4393      	bics	r3, r2
 8003a1c:	6023      	str	r3, [r4, #0]
 8003a1e:	e7f8      	b.n	8003a12 <_printf_i+0x176>
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	680d      	ldr	r5, [r1, #0]
 8003a24:	1d10      	adds	r0, r2, #4
 8003a26:	6949      	ldr	r1, [r1, #20]
 8003a28:	6018      	str	r0, [r3, #0]
 8003a2a:	6813      	ldr	r3, [r2, #0]
 8003a2c:	062e      	lsls	r6, r5, #24
 8003a2e:	d501      	bpl.n	8003a34 <_printf_i+0x198>
 8003a30:	6019      	str	r1, [r3, #0]
 8003a32:	e002      	b.n	8003a3a <_printf_i+0x19e>
 8003a34:	066d      	lsls	r5, r5, #25
 8003a36:	d5fb      	bpl.n	8003a30 <_printf_i+0x194>
 8003a38:	8019      	strh	r1, [r3, #0]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	9d03      	ldr	r5, [sp, #12]
 8003a3e:	6123      	str	r3, [r4, #16]
 8003a40:	e7bf      	b.n	80039c2 <_printf_i+0x126>
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	1d11      	adds	r1, r2, #4
 8003a46:	6019      	str	r1, [r3, #0]
 8003a48:	6815      	ldr	r5, [r2, #0]
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	0028      	movs	r0, r5
 8003a4e:	6862      	ldr	r2, [r4, #4]
 8003a50:	f000 f858 	bl	8003b04 <memchr>
 8003a54:	2800      	cmp	r0, #0
 8003a56:	d001      	beq.n	8003a5c <_printf_i+0x1c0>
 8003a58:	1b40      	subs	r0, r0, r5
 8003a5a:	6060      	str	r0, [r4, #4]
 8003a5c:	6863      	ldr	r3, [r4, #4]
 8003a5e:	6123      	str	r3, [r4, #16]
 8003a60:	2300      	movs	r3, #0
 8003a62:	9a03      	ldr	r2, [sp, #12]
 8003a64:	7013      	strb	r3, [r2, #0]
 8003a66:	e7ac      	b.n	80039c2 <_printf_i+0x126>
 8003a68:	002a      	movs	r2, r5
 8003a6a:	6923      	ldr	r3, [r4, #16]
 8003a6c:	9906      	ldr	r1, [sp, #24]
 8003a6e:	9805      	ldr	r0, [sp, #20]
 8003a70:	9d07      	ldr	r5, [sp, #28]
 8003a72:	47a8      	blx	r5
 8003a74:	3001      	adds	r0, #1
 8003a76:	d0ae      	beq.n	80039d6 <_printf_i+0x13a>
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	079b      	lsls	r3, r3, #30
 8003a7c:	d415      	bmi.n	8003aaa <_printf_i+0x20e>
 8003a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a80:	68e0      	ldr	r0, [r4, #12]
 8003a82:	4298      	cmp	r0, r3
 8003a84:	daa9      	bge.n	80039da <_printf_i+0x13e>
 8003a86:	0018      	movs	r0, r3
 8003a88:	e7a7      	b.n	80039da <_printf_i+0x13e>
 8003a8a:	0022      	movs	r2, r4
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	9906      	ldr	r1, [sp, #24]
 8003a90:	9805      	ldr	r0, [sp, #20]
 8003a92:	9e07      	ldr	r6, [sp, #28]
 8003a94:	3219      	adds	r2, #25
 8003a96:	47b0      	blx	r6
 8003a98:	3001      	adds	r0, #1
 8003a9a:	d09c      	beq.n	80039d6 <_printf_i+0x13a>
 8003a9c:	3501      	adds	r5, #1
 8003a9e:	68e3      	ldr	r3, [r4, #12]
 8003aa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	42ab      	cmp	r3, r5
 8003aa6:	dcf0      	bgt.n	8003a8a <_printf_i+0x1ee>
 8003aa8:	e7e9      	b.n	8003a7e <_printf_i+0x1e2>
 8003aaa:	2500      	movs	r5, #0
 8003aac:	e7f7      	b.n	8003a9e <_printf_i+0x202>
 8003aae:	46c0      	nop			@ (mov r8, r8)
 8003ab0:	08003cd1 	.word	0x08003cd1
 8003ab4:	08003ce2 	.word	0x08003ce2

08003ab8 <memmove>:
 8003ab8:	b510      	push	{r4, lr}
 8003aba:	4288      	cmp	r0, r1
 8003abc:	d806      	bhi.n	8003acc <memmove+0x14>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d008      	beq.n	8003ad6 <memmove+0x1e>
 8003ac4:	5ccc      	ldrb	r4, [r1, r3]
 8003ac6:	54c4      	strb	r4, [r0, r3]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	e7f9      	b.n	8003ac0 <memmove+0x8>
 8003acc:	188b      	adds	r3, r1, r2
 8003ace:	4298      	cmp	r0, r3
 8003ad0:	d2f5      	bcs.n	8003abe <memmove+0x6>
 8003ad2:	3a01      	subs	r2, #1
 8003ad4:	d200      	bcs.n	8003ad8 <memmove+0x20>
 8003ad6:	bd10      	pop	{r4, pc}
 8003ad8:	5c8b      	ldrb	r3, [r1, r2]
 8003ada:	5483      	strb	r3, [r0, r2]
 8003adc:	e7f9      	b.n	8003ad2 <memmove+0x1a>
	...

08003ae0 <_sbrk_r>:
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	b570      	push	{r4, r5, r6, lr}
 8003ae4:	4d06      	ldr	r5, [pc, #24]	@ (8003b00 <_sbrk_r+0x20>)
 8003ae6:	0004      	movs	r4, r0
 8003ae8:	0008      	movs	r0, r1
 8003aea:	602b      	str	r3, [r5, #0]
 8003aec:	f7fd fbba 	bl	8001264 <_sbrk>
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	d103      	bne.n	8003afc <_sbrk_r+0x1c>
 8003af4:	682b      	ldr	r3, [r5, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d000      	beq.n	8003afc <_sbrk_r+0x1c>
 8003afa:	6023      	str	r3, [r4, #0]
 8003afc:	bd70      	pop	{r4, r5, r6, pc}
 8003afe:	46c0      	nop			@ (mov r8, r8)
 8003b00:	20000240 	.word	0x20000240

08003b04 <memchr>:
 8003b04:	b2c9      	uxtb	r1, r1
 8003b06:	1882      	adds	r2, r0, r2
 8003b08:	4290      	cmp	r0, r2
 8003b0a:	d101      	bne.n	8003b10 <memchr+0xc>
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	4770      	bx	lr
 8003b10:	7803      	ldrb	r3, [r0, #0]
 8003b12:	428b      	cmp	r3, r1
 8003b14:	d0fb      	beq.n	8003b0e <memchr+0xa>
 8003b16:	3001      	adds	r0, #1
 8003b18:	e7f6      	b.n	8003b08 <memchr+0x4>

08003b1a <memcpy>:
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	b510      	push	{r4, lr}
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d100      	bne.n	8003b24 <memcpy+0xa>
 8003b22:	bd10      	pop	{r4, pc}
 8003b24:	5ccc      	ldrb	r4, [r1, r3]
 8003b26:	54c4      	strb	r4, [r0, r3]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	e7f8      	b.n	8003b1e <memcpy+0x4>

08003b2c <_realloc_r>:
 8003b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b2e:	0006      	movs	r6, r0
 8003b30:	000c      	movs	r4, r1
 8003b32:	0015      	movs	r5, r2
 8003b34:	2900      	cmp	r1, #0
 8003b36:	d105      	bne.n	8003b44 <_realloc_r+0x18>
 8003b38:	0011      	movs	r1, r2
 8003b3a:	f7ff fc51 	bl	80033e0 <_malloc_r>
 8003b3e:	0004      	movs	r4, r0
 8003b40:	0020      	movs	r0, r4
 8003b42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b44:	2a00      	cmp	r2, #0
 8003b46:	d103      	bne.n	8003b50 <_realloc_r+0x24>
 8003b48:	f7ff fbde 	bl	8003308 <_free_r>
 8003b4c:	2400      	movs	r4, #0
 8003b4e:	e7f7      	b.n	8003b40 <_realloc_r+0x14>
 8003b50:	f000 f81b 	bl	8003b8a <_malloc_usable_size_r>
 8003b54:	0007      	movs	r7, r0
 8003b56:	4285      	cmp	r5, r0
 8003b58:	d802      	bhi.n	8003b60 <_realloc_r+0x34>
 8003b5a:	0843      	lsrs	r3, r0, #1
 8003b5c:	42ab      	cmp	r3, r5
 8003b5e:	d3ef      	bcc.n	8003b40 <_realloc_r+0x14>
 8003b60:	0029      	movs	r1, r5
 8003b62:	0030      	movs	r0, r6
 8003b64:	f7ff fc3c 	bl	80033e0 <_malloc_r>
 8003b68:	9001      	str	r0, [sp, #4]
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d0ee      	beq.n	8003b4c <_realloc_r+0x20>
 8003b6e:	002a      	movs	r2, r5
 8003b70:	42bd      	cmp	r5, r7
 8003b72:	d900      	bls.n	8003b76 <_realloc_r+0x4a>
 8003b74:	003a      	movs	r2, r7
 8003b76:	0021      	movs	r1, r4
 8003b78:	9801      	ldr	r0, [sp, #4]
 8003b7a:	f7ff ffce 	bl	8003b1a <memcpy>
 8003b7e:	0021      	movs	r1, r4
 8003b80:	0030      	movs	r0, r6
 8003b82:	f7ff fbc1 	bl	8003308 <_free_r>
 8003b86:	9c01      	ldr	r4, [sp, #4]
 8003b88:	e7da      	b.n	8003b40 <_realloc_r+0x14>

08003b8a <_malloc_usable_size_r>:
 8003b8a:	1f0b      	subs	r3, r1, #4
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	1f18      	subs	r0, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	da01      	bge.n	8003b98 <_malloc_usable_size_r+0xe>
 8003b94:	580b      	ldr	r3, [r1, r0]
 8003b96:	18c0      	adds	r0, r0, r3
 8003b98:	4770      	bx	lr
	...

08003b9c <_init>:
 8003b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9e:	46c0      	nop			@ (mov r8, r8)
 8003ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba2:	bc08      	pop	{r3}
 8003ba4:	469e      	mov	lr, r3
 8003ba6:	4770      	bx	lr

08003ba8 <_fini>:
 8003ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bae:	bc08      	pop	{r3}
 8003bb0:	469e      	mov	lr, r3
 8003bb2:	4770      	bx	lr
